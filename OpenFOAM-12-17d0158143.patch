 Allwmake                                           |   5 +-
 applications/Allwmake                              |   2 +
 .../postProcessing/graphics/PVReaders/Allwmake     |   6 +
 bin/foamMonitor                                    |   8 +-
 bin/paraFoam                                       |   8 ++
 bin/tools/RunFunctions                             |   3 +
 etc/bashrc                                         |  73 ++++++++---
 etc/config.csh/functions                           |   9 +-
 etc/config.csh/mac/paraview                        |  13 ++
 etc/config.csh/mpi                                 |   5 +-
 etc/config.csh/settings                            |  17 ++-
 etc/config.csh/unset                               |  36 ++++--
 etc/config.sh/mac/CGAL                             |  47 ++++++++
 etc/config.sh/mac/functions                        | 134 +++++++++++++++++++++
 etc/config.sh/mac/metis                            |  44 +++++++
 etc/config.sh/mac/paraview                         |  18 +++
 etc/config.sh/mac/scotch                           |  47 ++++++++
 etc/config.sh/mpi                                  |   5 +-
 etc/config.sh/settings                             |  18 ++-
 etc/config.sh/unset                                |  23 +++-
 etc/cshrc                                          |  61 ++++++++--
 src/Allwmake                                       |   2 +
 src/OSspecific/POSIX/POSIX.C                       |  35 +++++-
 src/OSspecific/POSIX/clockTime/clockTime.H         |   3 +
 src/OSspecific/POSIX/fileStat.C                    |   2 +
 src/OSspecific/POSIX/printStack.C                  |  43 ++++++-
 src/OSspecific/POSIX/signals/sigFpe.C              |  79 +++++++++++-
 src/OSspecific/POSIX/signals/sigFpe.H              |  12 +-
 src/OpenFOAM/Make/files                            |   2 +
 src/OpenFOAM/containers/Lists/UList/UList.C        |   1 +
 .../db/dynamicLibrary/dynamicCode/dynamicCode.C    |   4 +
 .../db/dynamicLibrary/dynamicCode/dynamicCode.H    |   4 +
 src/OpenFOAM/primitives/Scalar/doubleFloat.H       |  40 ++++++
 src/OpenFOAM/primitives/hashes/Hasher/Hasher.C     |   2 +-
 src/OpenFOAM/primitives/ints/int/int.H             |   4 +
 src/OpenFOAM/primitives/ints/int16/int16.C         |  48 ++++++++
 src/OpenFOAM/primitives/ints/int16/int16.H         |  73 +++++++++++
 src/OpenFOAM/primitives/ints/int64/int64.H         |   5 +
 src/OpenFOAM/primitives/ints/int64/int64IO.C       |  12 ++
 src/OpenFOAM/primitives/ints/uint/uint.H           |   1 +
 src/OpenFOAM/primitives/ints/uint16/uint16.C       |  48 ++++++++
 src/OpenFOAM/primitives/ints/uint16/uint16.H       |  73 +++++++++++
 src/OpenFOAM/primitives/ints/uint64/uint64.H       |   4 +
 src/OpenFOAM/primitives/ints/uint64/uint64IO.C     |   8 ++
 src/fvAgglomerationMethods/Allwmake                |  10 +-
 .../MGridGenGamgAgglomeration/Make/options         |  14 ++-
 src/parallel/decompose/ptscotch/Make/options       |   7 +-
 src/parallel/decompose/scotch/Make/options         |   7 +-
 src/renumber/SloanRenumber/Make/options            |  14 ++-
 wmake/makefiles/files                              |   2 +-
 wmake/makefiles/general                            |   4 +
 wmake/rules/General/transform                      |   1 -
 wmake/rules/darwin64Clang/CGAL                     |   9 ++
 wmake/rules/darwin64Clang/bison                    |  13 ++
 wmake/rules/darwin64Clang/c                        |  23 ++++
 wmake/rules/darwin64Clang/c++                      |  35 ++++++
 wmake/rules/darwin64Clang/c++Debug                 |   4 +
 wmake/rules/darwin64Clang/c++Opt                   |   5 +
 wmake/rules/darwin64Clang/c++Prof                  |   4 +
 wmake/rules/darwin64Clang/cDebug                   |   4 +
 wmake/rules/darwin64Clang/cOpt                     |   4 +
 wmake/rules/darwin64Clang/cProf                    |   4 +
 wmake/rules/darwin64Clang/flex                     |   5 +
 wmake/rules/darwin64Clang/flex++                   |   5 +
 wmake/rules/darwin64Clang/general                  |  16 +++
 wmake/rules/darwin64Clang/yacc                     |  13 ++
 wmake/rules/darwinArm64Clang/CGAL                  |   9 ++
 wmake/rules/darwinArm64Clang/bison                 |  13 ++
 wmake/rules/darwinArm64Clang/c                     |  23 ++++
 wmake/rules/darwinArm64Clang/c++                   |  35 ++++++
 wmake/rules/darwinArm64Clang/c++Debug              |   4 +
 wmake/rules/darwinArm64Clang/c++Opt                |   5 +
 wmake/rules/darwinArm64Clang/c++Prof               |   4 +
 wmake/rules/darwinArm64Clang/cDebug                |   4 +
 wmake/rules/darwinArm64Clang/cOpt                  |   4 +
 wmake/rules/darwinArm64Clang/cProf                 |   4 +
 wmake/rules/darwinArm64Clang/flex                  |   5 +
 wmake/rules/darwinArm64Clang/flex++                |   5 +
 wmake/rules/darwinArm64Clang/general               |  16 +++
 wmake/rules/darwinArm64Clang/yacc                  |  13 ++
 wmake/src/Makefile                                 |   2 +
 wmake/wmake                                        |   5 +
 wmake/wmakeLnInclude                               |  13 ++
 wmake/wmakeLnIncludeAll                            |   1 +
 84 files changed, 1376 insertions(+), 79 deletions(-)

diff --git a/Allwmake b/Allwmake
index 3f6a7523d2..00810aff6e 100755
--- a/Allwmake
+++ b/Allwmake
@@ -12,11 +12,13 @@ wmakeCheckPwd "$WM_PROJECT_DIR" || {
     exit 1
 }
 
+[ "$(uname -s)" = "Darwin" ] || {
 [ -n "$FOAM_EXT_LIBBIN" ] || {
     echo "Allwmake error: FOAM_EXT_LIBBIN not set"
     echo "    Check the OpenFOAM entries in your dot-files and source them."
     exit 1
 }
+}
 
 # Compile wmake support applications
 (cd wmake/src && make)
@@ -26,7 +28,8 @@ if [ -d "$WM_THIRD_PARTY_DIR" ]
 then
     $WM_THIRD_PARTY_DIR/Allwmake
 else
-    echo "Allwmake: no ThirdParty directory found - skipping"
+    [ "$(uname -s)" = "Darwin" ] \
+        || echo "Allwmake: no ThirdParty directory found - skipping"
 fi
 
 # Compile OpenFOAM libraries and applications
diff --git a/applications/Allwmake b/applications/Allwmake
index d11e7c8e1d..c653bfaacc 100755
--- a/applications/Allwmake
+++ b/applications/Allwmake
@@ -12,11 +12,13 @@ wmakeCheckPwd "$WM_PROJECT_DIR/applications" || {
     exit 1
 }
 
+[ "$(uname -s)" = "Darwin" ] || {
 [ -n "$FOAM_EXT_LIBBIN" ] || {
     echo "Allwmake error: FOAM_EXT_LIBBIN not set"
     echo "    Check the OpenFOAM entries in your dot-files and source them."
     exit 1
 }
+}
 
 wmake -all $targetType solvers
 modules/Allwmake $targetType $*
diff --git a/applications/utilities/postProcessing/graphics/PVReaders/Allwmake b/applications/utilities/postProcessing/graphics/PVReaders/Allwmake
index 1deca76ee0..8756574862 100755
--- a/applications/utilities/postProcessing/graphics/PVReaders/Allwmake
+++ b/applications/utilities/postProcessing/graphics/PVReaders/Allwmake
@@ -4,6 +4,12 @@ cd ${0%/*} || exit 1    # Run from this directory
 # Parse arguments for library compilation
 . $WM_PROJECT_DIR/wmake/scripts/AllwmakeParseArguments
 
+if [ "$(uname -s)" = "Darwin" ]
+then
+    echo "Skipping PVReaders on macOS."
+    exit 0
+fi
+
 if [ ! -d "$ParaView_DIR" ]
 then
     echo "    Warning: ParaView not found in $ParaView_DIR. Skipping."
diff --git a/bin/foamMonitor b/bin/foamMonitor
index 3a9bc2179d..0de3c227cd 100755
--- a/bin/foamMonitor
+++ b/bin/foamMonitor
@@ -93,7 +93,9 @@ plotFileHeader() {
     [ "$logscale" = yes ] && _ticFormat="%1.e"
     _otherAxis="$([ "$AXIS" = x ] && echo y || echo x)"
 
-    printf "set term %s" "$_term"
+    printf "selected_terminal = 'x11'\n"
+    printf "for [t in 'wxt qt'] if (strstrt(GPVAL_TERMINALS, t)) selected_terminal = t\n"
+    printf "set term selected_terminal $_term"
     [ "$_size" = default ] || printf " size %s" "$_size"
     printf "\n"
 
@@ -315,9 +317,11 @@ trap 'rm -f $gp_file' EXIT
 touch "$file"
 
 # Re-read data file to update graph
+_stat="stat --format=%Y"
+[ "$(uname -s)" = "Darwin" ] && _stat="stat -f %m"
 while true
 do
-    mod_time=$(stat --format=%Y "$file")
+    mod_time=$($_stat "$file")
     idle_ago=$(( $(date +%s) - idle ))
     test "$mod_time" -gt "$idle_ago" || break
     sleep "$refresh"
diff --git a/bin/paraFoam b/bin/paraFoam
index b41a61a18a..cf358908d8 100755
--- a/bin/paraFoam
+++ b/bin/paraFoam
@@ -111,6 +111,14 @@ extension=OpenFOAM
 requirePVExe=1
 requirePVReader=1
 
+if [ "$(uname -s)" = "Darwin" ]
+then
+	extension=foam
+
+	requirePVExe=0
+	requirePVReader=0
+fi
+
 # Parse options
 while [ "$#" -gt 0 ]
 do
diff --git a/bin/tools/RunFunctions b/bin/tools/RunFunctions
index 55776db644..fb52df49d8 100644
--- a/bin/tools/RunFunctions
+++ b/bin/tools/RunFunctions
@@ -28,6 +28,9 @@
 #     Miscellaneous functions for running tutorial cases
 #------------------------------------------------------------------------------
 
+[ -z "$DYLD_LIBRARY_PATH" -a -n "$FOAM_DYLD_LIBRARY_PATH" ] \
+    && export DYLD_LIBRARY_PATH="$FOAM_DYLD_LIBRARY_PATH"
+
 isTest()
 {
     for i in "$@"; do
diff --git a/etc/bashrc b/etc/bashrc
index b8adf28e3b..be668902cc 100644
--- a/etc/bashrc
+++ b/etc/bashrc
@@ -61,6 +61,16 @@ unset bashrcFile
 # END OF (NORMAL) USER EDITABLE PART
 ################################################################################
 
+_foam_on_macos()
+{
+    if [ "$(uname -s)" = "Darwin" ]
+    then
+        return 0
+    else
+        return 1
+    fi
+}
+
 # The default environment variables below can be overridden in a prefs.sh file
 # located in ~/.OpenFOAM/$WM_PROJECT_VERSION, ~/.OpenFOAM,
 # $FOAM_INST_DIR/site/$WM_PROJECT_VERSION or $FOAM_INST_DIR/site
@@ -72,6 +82,7 @@ export WM_COMPILER_TYPE=system
 #- Compiler:
 #    WM_COMPILER = Gcc | Gcc48 ... Gcc62 | Clang | Icx
 export WM_COMPILER=Gcc
+_foam_on_macos && export WM_COMPILER=Clang
 unset WM_COMPILER_ARCH WM_COMPILER_LIB_ARCH
 
 #- Memory addressing:
@@ -145,9 +156,10 @@ fi
 # Source initialisation functions
 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 . $WM_PROJECT_DIR/etc/config.sh/functions
+_foam_on_macos && . $WM_PROJECT_DIR/etc/config.sh/mac/functions
 
 # Add in preset user or site preferences:
-_foamSource `$WM_PROJECT_DIR/bin/foamEtcFile prefs.sh`
+_foamSource $($WM_PROJECT_DIR/bin/foamEtcFile prefs.sh)
 
 # Evaluate command-line parameters of the form "param=keyword" or unset
 # parameters with "param="
@@ -156,11 +168,14 @@ _foamParams $@
 
 # Location of third-party software
 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-if [ ${WM_THIRD_PARTY%%/*} = ${WM_PROJECT_DIR##*/} ]
+if [ ! _foam_on_macos ]
 then
-    export WM_THIRD_PARTY_DIR=$WM_PROJECT_INST_DIR/$WM_THIRD_PARTY
-else
-    export WM_THIRD_PARTY_DIR=$WM_PROJECT_INST_DIR/$WM_THIRD_PARTY-$WM_PROJECT_VERSION
+    if [ ${WM_THIRD_PARTY%%/*} = ${WM_PROJECT_DIR##*/} ]
+    then
+        export WM_THIRD_PARTY_DIR=$WM_PROJECT_INST_DIR/$WM_THIRD_PARTY
+    else
+        export WM_THIRD_PARTY_DIR=$WM_PROJECT_INST_DIR/$WM_THIRD_PARTY-$WM_PROJECT_VERSION
+    fi
 fi
 
 if [ -d "$WM_THIRD_PARTY_DIR" ]
@@ -192,16 +207,27 @@ export WM_PROJECT_USER_DIR=$HOME/$WM_PROJECT/$USER-$WM_PROJECT_VERSION
 foamClean=$WM_PROJECT_DIR/bin/foamCleanPath
 
 #- Clean PATH
-cleaned=`$foamClean "$PATH" "$foamOldDirs"` && PATH="$cleaned"
+cleaned=$($foamClean "$PATH" "$foamOldDirs") && PATH="$cleaned"
 
-#- Clean LD_LIBRARY_PATH
-cleaned=`$foamClean "$LD_LIBRARY_PATH" "$foamOldDirs"` \
-    && LD_LIBRARY_PATH="$cleaned"
+if _foam_on_macos
+then
+    #- Clean DYLD_LIBRARY_PATH on macOS
+    cleaned=$($foamClean "$DYLD_LIBRARY_PATH" "$foamOldDirs") \
+        && DYLD_LIBRARY_PATH="$cleaned"
+    export DYLD_LIBRARY_PATH
+    FOAM_DYLD_LIBRARY_PATH="$DYDL_LIBRARY_PATH"
+    export FOAM_DYLD_LIBRARY_PATH
+else
+    #- Clean LD_LIBRARY_PATH
+    cleaned=$($foamClean "$LD_LIBRARY_PATH" "$foamOldDirs") \
+        && LD_LIBRARY_PATH="$cleaned"
+    export LD_LIBRARY_PATH
+fi
 
 #- Clean MANPATH
-cleaned=`$foamClean "$MANPATH" "$foamOldDirs"` && MANPATH="$cleaned"
+cleaned=$($foamClean "$MANPATH" "$foamOldDirs") && MANPATH="$cleaned"
 
-export PATH LD_LIBRARY_PATH MANPATH
+export PATH MANPATH
 
 
 # Source project setup files
@@ -213,7 +239,12 @@ _foamSource $WM_PROJECT_DIR/etc/config.sh/aliases
 # Source user setup files for optional packages
 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 _foamSource `$WM_PROJECT_DIR/bin/foamEtcFile config.sh/mpi`
-_foamSource `$WM_PROJECT_DIR/bin/foamEtcFile config.sh/paraview`
+if _foam_on_macos
+then
+    _foamSource `$WM_PROJECT_DIR/bin/foamEtcFile config.sh/mac/paraview`
+else
+    _foamSource `$WM_PROJECT_DIR/bin/foamEtcFile config.sh/paraview`
+fi
 _foamSource `$WM_PROJECT_DIR/bin/foamEtcFile config.sh/ensight`
 _foamSource `$WM_PROJECT_DIR/bin/foamEtcFile config.sh/gperftools`
 
@@ -223,13 +254,23 @@ _foamSource `$WM_PROJECT_DIR/bin/foamEtcFile config.sh/gperftools`
 #- Clean PATH
 cleaned=`$foamClean "$PATH"` && PATH="$cleaned"
 
-#- Clean LD_LIBRARY_PATH
-cleaned=`$foamClean "$LD_LIBRARY_PATH"` && LD_LIBRARY_PATH="$cleaned"
+if _foam_on_macos
+then
+    #- Clean DYLD_LIBRARY_PATH
+    cleaned=`$foamClean "$DYLD_LIBRARY_PATH"` && DYLD_LIBRARY_PATH="$cleaned"
+    export DYLD_LIBRARY_PATH
+    FOAM_DYLD_LIBRARY_PATH="$DYLD_LIBRARY_PATH"
+    export FOAM_DYLD_LIBRARY_PATH
+else
+    #- Clean LD_LIBRARY_PATH
+    cleaned=`$foamClean "$LD_LIBRARY_PATH"` && LD_LIBRARY_PATH="$cleaned"
+    export LD_LIBRARY_PATH
+fi
 
 #- Clean MANPATH (trailing ':' to find system pages)
 cleaned=`$foamClean "$MANPATH"`: && MANPATH="$cleaned"
 
-export PATH LD_LIBRARY_PATH MANPATH
+export PATH MANPATH
 
 #- Clean LD_PRELOAD
 if [ -n "$LD_PRELOAD" ]
@@ -247,6 +288,8 @@ unset cleaned foamClean foamOldDirs
 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 . $WM_PROJECT_DIR/etc/config.sh/functions
 
+_foam_on_macos && . $WM_PROJECT_DIR/etc/config.sh/mac/functions
+
 # Source the bash completion file:
 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 [ "$BASH" ] && . $WM_PROJECT_DIR/etc/config.sh/bash_completion
diff --git a/etc/config.csh/functions b/etc/config.csh/functions
index f10f7c5272..98044f5ea7 100644
--- a/etc/config.csh/functions
+++ b/etc/config.csh/functions
@@ -31,6 +31,7 @@
 #------------------------------------------------------------------------------
 
 if ( ! $?WM_CSH_FUNCTIONS ) then
+    @ _foamDarwin = (`uname -s` == "Darwin")
 
     # Temporary environment variable for automatically (un)loading functions
     set WM_CSH_FUNCTIONS loaded
@@ -66,7 +67,11 @@ if ( ! $?WM_CSH_FUNCTIONS ) then
     alias _foamAddPath 'setenv PATH \!*\:${PATH}'
 
     # Prefix to LD_LIBRARY_PATH
-    alias _foamAddLib 'setenv LD_LIBRARY_PATH \!*\:${LD_LIBRARY_PATH}'
+    if ($_foamDarwin) then
+        alias _foamAddLib 'setenv FOAM_DYLD_LIBRARY_PATH \!*\:${FOAM_DYLD_LIBRARY_PATH}; setenv DYLD_LIBRARY_PATH \!*\:${DYLD_LIBRARY_PATH}'
+    else
+        alias _foamAddLib 'setenv LD_LIBRARY_PATH \!*\:${LD_LIBRARY_PATH}'
+    endif
 
     # Prefix to MANPATH
     alias _foamAddMan 'setenv MANPATH \!*\:${MANPATH}'
@@ -89,6 +94,8 @@ if ( ! $?WM_CSH_FUNCTIONS ) then
     endif\
     unset _mostRecentDir'
 
+    unset _foamDarwin
+
 else
 
     # Cleanup environment:
diff --git a/etc/config.csh/mac/paraview b/etc/config.csh/mac/paraview
new file mode 100644
index 0000000000..53adbcca5b
--- /dev/null
+++ b/etc/config.csh/mac/paraview
@@ -0,0 +1,13 @@
+set _paraview = /Applications/[Pp][Aa][Rr][Aa][Vv][Ii][Ee][Ww]*.app
+if ( -d $_paraview ) then
+    if ( $?prompt ) echo Using $_paraview
+    alias paraview "$_paraview/Contents/MacOS/paraview"
+else
+    echo
+    echo "Please download binary Paraview release from"
+    echo "http://paraview.org and install it in /Applications"
+    echo "folder."
+    echo
+endif
+
+#----------------------------- vi: set ft=csh et: ----------------------------
diff --git a/etc/config.csh/mpi b/etc/config.csh/mpi
index 1964101b58..22e7c8b853 100644
--- a/etc/config.csh/mpi
+++ b/etc/config.csh/mpi
@@ -259,7 +259,10 @@ endsw
 # Add (non-dummy) MPI implementation
 # Dummy MPI already added to LD_LIBRARY_PATH and has no external libraries
 if ( "$FOAM_MPI" != dummy ) then
-    _foamAddLib ${FOAM_LIBBIN}/${FOAM_MPI}:${FOAM_EXT_LIBBIN}/${FOAM_MPI}
+    if ($?FOAM_EXT_LIBBIN) then
+        _foamAddLib :${FOAM_EXT_LIBBIN}/${FOAM_MPI}
+    endif
+    _foamAddLib ${FOAM_LIBBIN}/${FOAM_MPI}
 endif
 
 
diff --git a/etc/config.csh/settings b/etc/config.csh/settings
index 6bd7c7db3b..b731666999 100644
--- a/etc/config.csh/settings
+++ b/etc/config.csh/settings
@@ -139,6 +139,13 @@ case SunOS:
     setenv WM_LDFLAGS '-mabi=64 -G0'
     breaksw
 
+case Darwin:
+    setenv WM_ARCH darwin64
+    setenv WM_COMPILER_LIB_ARCH 64
+    setenv WM_CC 'clang'
+    setenv WM_CXX 'clang++'
+    breaksw
+
 default: # An unsupported operating system
     /bin/cat <<USAGE
 
@@ -166,7 +173,9 @@ setenv FOAM_APPBIN $WM_PROJECT_DIR/platforms/$WM_OPTIONS/bin
 setenv FOAM_LIBBIN $WM_PROJECT_DIR/platforms/$WM_OPTIONS/lib
 
 # External (ThirdParty) libraries
-setenv FOAM_EXT_LIBBIN $WM_THIRD_PARTY_DIR/platforms/$WM_ARCH$WM_COMPILER$WM_PRECISION_OPTION$WM_LABEL_OPTION/lib
+if (${?WM_THIRD_PARTY_DIR}) then
+    setenv FOAM_EXT_LIBBIN $WM_THIRD_PARTY_DIR/platforms/$WM_ARCH$WM_COMPILER$WM_PRECISION_OPTION$WM_LABEL_OPTION/lib
+endif
 
 # Site-specific directory
 if ( $?WM_PROJECT_SITE ) then
@@ -217,7 +226,11 @@ endif
 unset siteDir
 
 # Make sure to pick up dummy versions of external libraries last
-_foamAddLib  ${FOAM_USER_LIBBIN}:${FOAM_SITE_LIBBIN}:${FOAM_LIBBIN}:${FOAM_EXT_LIBBIN}:${FOAM_LIBBIN}/dummy
+_foamAddLib ${FOAM_LIBBIN}/dummy
+if (${?FOAM_EXT_LIBBIN}) then
+    _foamAddLib ${FOAM_EXT_LIBBIN}
+endif
+_foamAddLib  ${FOAM_USER_LIBBIN}:${FOAM_SITE_LIBBIN}:${FOAM_LIBBIN}
 
 # Compiler settings
 # ~~~~~~~~~~~~~~~~~
diff --git a/etc/config.csh/unset b/etc/config.csh/unset
index d29a12a1b6..9bd67b7fae 100644
--- a/etc/config.csh/unset
+++ b/etc/config.csh/unset
@@ -29,6 +29,8 @@
 #
 #------------------------------------------------------------------------------
 
+@ foamDarwin = (`uname -s` == "Darwin")
+
 # Clean standard environment variables (PATH, LD_LIBRARY_PATH, MANPATH)
 unset foamClean
 if ( $?WM_PROJECT_DIR ) then
@@ -37,7 +39,10 @@ if ( $?WM_PROJECT_DIR ) then
 endif
 
 # The old dirs to be cleaned from the environment variables
-set foamOldDirs="$WM_PROJECT_DIR $WM_THIRD_PARTY_DIR $HOME/$WM_PROJECT/$LOGNAME $FOAM_SITE_APPBIN $FOAM_SITE_LIBBIN"
+set foamOldDirs="$WM_PROJECT_DIR $HOME/$WM_PROJECT/$LOGNAME $FOAM_SITE_APPBIN $FOAM_SITE_LIBBIN"
+if ( ${?WM_THIRD_PARTY_DIR} ) then
+   set foamOldDirs="$foamOldDirs $WM_THIRD_PARTY_DIR"
+endif
 if ( $?WM_PROJECT_SITE ) then
    set foamOldDirs="$foamOldDirs $WM_PROJECT_SITE"
 endif
@@ -54,6 +59,7 @@ unsetenv WM_ARCH_OPTION
 unsetenv WM_CC
 unsetenv WM_CFLAGS
 unsetenv WM_COMPILER
+unsetenv WM_COMPILER_ARCH
 unsetenv WM_COMPILER_TYPE
 unsetenv WM_COMPILER_LIB_ARCH
 unsetenv WM_COMPILE_OPTION
@@ -78,7 +84,8 @@ unsetenv WM_PROJECT_USER_DIR
 unsetenv WM_PROJECT_VERSION
 unsetenv WM_SCHEDULER
 unsetenv WM_THIRD_PARTY
-unsetenv WM_THIRD_PARTY_DIR
+if ($?WM_THIRD_PARTY_DIR) \
+    unsetenv WM_THIRD_PARTY_DIR
 
 
 #------------------------------------------------------------------------------
@@ -160,11 +167,21 @@ if ( $?foamClean ) then
     set cleaned=`$foamClean "$PATH" "$foamOldDirs"`
     if ( $status == 0 ) setenv PATH $cleaned
 
-    if ($?LD_LIBRARY_PATH) then
-        set cleaned=`$foamClean "$LD_LIBRARY_PATH" "$foamOldDirs"`
-        if ( $status == 0 ) setenv LD_LIBRARY_PATH $cleaned
-
-        if ( ${%LD_LIBRARY_PATH} == 0 ) unsetenv LD_LIBRARY_PATH
+    if ($foamDarwin) then
+        if ($?FOAM_DYLD_LIBRARY_PATH) then
+            set cleaned=`$foamClean "$FOAM_DYLD_LIBRARY_PATH" "$foamOldDirs"`
+            if ( $status == 0 ) setenv DYLD_LIBRARY_PATH $cleaned
+
+            if ( ${%DYLD_LIBRARY_PATH} == 0 ) unsetenv DYLD_LIBRARY_PATH
+            unsetenv FOAM_DYLD_LIBRARY_PATH
+        endif
+    else
+        if ($?LD_LIBRARY_PATH) then
+            set cleaned=`$foamClean "$LD_LIBRARY_PATH" "$foamOldDirs"`
+            if ( $status == 0 ) setenv LD_LIBRARY_PATH $cleaned
+
+            if ( ${%LD_LIBRARY_PATH} == 0 ) unsetenv LD_LIBRARY_PATH
+        endif
     endif
 
     if ($?MANPATH) then
@@ -177,7 +194,7 @@ if ( $?foamClean ) then
 endif
 
 
-unset cleaned foamClean foamOldDirs
+unset cleaned foamClean foamOldDirs foamDarwin
 
 
 #------------------------------------------------------------------------------
@@ -188,6 +205,7 @@ unalias wm64
 unalias wm32
 unalias wmSP
 unalias wmDP
+unalias wmLP
 
 unalias wmRefresh
 unalias wmUnset
@@ -210,4 +228,4 @@ unalias foamVersion
 unalias foamPV
 
 
-#------------------------------------------------------------------------------
+#-------------------- vi: set ft=tcsh et sw=4 ts=4 sts=4: ---------------------
diff --git a/etc/config.sh/mac/CGAL b/etc/config.sh/mac/CGAL
new file mode 100644
index 0000000000..fc6393cf7d
--- /dev/null
+++ b/etc/config.sh/mac/CGAL
@@ -0,0 +1,47 @@
+# CGAL configuration for OS X
+
+. $WM_PROJECT_DIR/etc/config.sh/mac/functions
+if [ "x$(_foamBrew)" = "xY" ]
+then
+    _prefix=$(_foamBrewPrefix)
+
+    boost_version="boost-$(_foamGetPackageVersion boost)"
+    cgal_version="CGAL-$(_foamGetPackageVersion cgal)"
+
+    export BOOST_ARCH_PATH="$_prefix/opt/boost"
+    export CGAL_ARCH_PATH="$_prefix/opt/cgal"
+    export MPFR_ARCH_PATH="$_prefix/opt/mpfr"
+    export GMP_ARCH_PATH="$_prefix/opt/gmp"
+
+    unset _prefix
+elif [ "x$(_foamPort)" = "xY" ]
+then
+    _prefix=$(_foamPortPrefix)
+
+    boost_version=$(_foamGetPackageVersion boost)
+    cgal_version=$(_foamGetPackageVersion cgal)
+
+    export BOOST_ARCH_PATH="$_prefix"
+    export CGAL_ARCH_PATH="$_prefix"
+    export GMP_ARCH_PATH="$_prefix"
+    export MPFR_ARCH_PATH="$_prefix"
+
+    unset _prefix
+else
+    boost_version=boost-unknown
+    cgal_version=CGAL-unknown
+
+    export BOOST_ARCH_PATH=/usr/local
+    export CGAL_ARCH_PATH=/usr/local
+fi
+
+if [ "$FOAM_VERBOSE" -a "$PS1" ]
+then
+    echo "Using CGAL and boost" 1>&2
+    echo "    $cgal_version at $CGAL_ARCH_PATH" 1>&2
+    echo "    $boost_version at $BOOST_ARCH_PATH" 1>&2
+fi
+unset boost_version cgal_version
+. $WM_PROJECT_DIR/etc/config.sh/mac/functions
+
+# vim: set ft=sh:
diff --git a/etc/config.sh/mac/functions b/etc/config.sh/mac/functions
new file mode 100644
index 0000000000..f2a5d841e7
--- /dev/null
+++ b/etc/config.sh/mac/functions
@@ -0,0 +1,134 @@
+# Additional functions for OS X
+
+if [ -z "$WM_BASH_FUNCTIONS_MAC" ]
+then
+    WM_BASH_FUNCTIONS_MAC=loaded
+
+    # Prefix to DYLD_LIBRARY_PATH and FOAM_DYLD_LIBRARY_PATH
+    _foamAddLib ()
+    {
+        while [ $# -ge 1 ]
+        do
+            export DYLD_LIBRARY_PATH=$1:$DYLD_LIBRARY_PATH
+            export FOAM_DYLD_LIBRARY_PATH=$1:$FOAM_DYLD_LIBRARY_PATH
+            shift
+        done
+    }
+
+    _foamBrew ()
+    {
+        if $(which -s brew)
+        then
+            echo Y
+            return 0
+        else
+            echo N
+            return 1
+        fi
+    }
+
+    _foamPort ()
+    {
+        if $(which -s port)
+        then
+            echo Y
+            return 0
+        else
+            echo N
+            return 1
+        fi
+    }
+
+    _foamPortPrefix ()
+    {
+        echo "$(dirname $(dirname $(which port)))"
+    }
+
+    _foamBrewPrefix ()
+    {
+        echo $(brew --prefix)
+    }
+
+    _foamGetPackageVersion ()
+    {
+        local version="?"
+        local ret=0
+        local pkg="$1"
+
+        if [ "x$(_foamBrew)" = "xY" ]
+        then
+            local prefix="$(_foamBrewPrefix)"
+            if [ -d "$prefix/opt/${pkg}64" -a "$WM_LABEL_SIZE" -eq 64 ]
+            then
+                version="$(basename $(readlink "$prefix/opt/${pkg}64"))"
+            elif [ -d "$prefix/opt/$pkg" ]
+            then
+                version="$(basename $(readlink "$prefix/opt/$pkg"))"
+            else
+                ret=1
+            fi
+        elif [ "x$(_foamPort)" = "xY" ]
+        then
+            version="0.0.x"
+        else
+            ret=1
+        fi
+        echo $version
+        return $ret
+    }
+
+    _foamGetPackageArchPath ()
+    {
+        local arch_path="/usr/local"
+        local ret=0
+        local pkg="$1"
+        if [ "x$(_foamBrew)" = "xY" ]
+        then
+            local prefix="$(_foamBrewPrefix)"
+            if [ -d "$prefix/opt/${pkg}64" -a "$WM_LABEL_SIZE" -eq 64 ]
+            then
+                arch_path="$prefix/opt/${pkg}64"
+            elif [ -d "$prefix/opt/$pkg" ]
+            then
+                arch_path="$prefix/opt/$pkg"
+            else
+                ret=1
+            fi
+        elif [ "x$(_foamPort)" = "xY" ]
+        then
+            arch_path="$(_foamPortPrefix)"
+        else
+            ret=1
+        fi
+        echo $arch_path
+        return $ret
+    }
+
+    _foam_increase_max_open_files ()
+    {
+        # Default value
+        local lim=4096
+
+        # Reset if parameter passed
+        [ -n "$1" ] && lim="$1"
+
+        # Silencing the errors
+        local current_limit=$(ulimit -n)
+        if [ "$current_limit" = "unlimited" ]
+        then
+            return 0
+        elif [ "$current_limit" -lt "$lim" ]
+        then
+            ulimit -n "$lim" > /dev/null 2>&1
+            return 0
+        fi
+        return 0
+    }
+else
+    unset WM_BASH_FUNCTIONS_MAC
+    unset _foamAddLib _foamBrew _foamPort _foamPortPrefix _foamBrewPrefix \
+        _foamGetPackageVersion _foamGetPackageArchPath \
+        _foam_increase_max_open_files
+fi
+
+# vim: set ft=sh:
diff --git a/etc/config.sh/mac/metis b/etc/config.sh/mac/metis
new file mode 100644
index 0000000000..bb87346f7b
--- /dev/null
+++ b/etc/config.sh/mac/metis
@@ -0,0 +1,44 @@
+#----------------------------------*-sh-*--------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 2013-2016 OpenFOAM Foundation
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# File
+#     etc/config.sh/metis
+#
+# Description
+#     Setup file for metis include/libraries.
+#     Sourced during wmake process only.
+#
+# Note
+#     A csh version is not needed, since the values here are only sourced
+#     during the wmake process
+#
+#------------------------------------------------------------------------------
+
+. $WM_PROJECT_DIR/etc/config.sh/mac/functions
+
+export METIS_VERSION=$(_foamGetPackageVersion metis)
+export METIS_ARCH_PATH=$(_foamGetPackageArchPath metis)
+
+. $WM_PROJECT_DIR/etc/config.sh/mac/functions
+
+#------------------------------------------------------------------------------
diff --git a/etc/config.sh/mac/paraview b/etc/config.sh/mac/paraview
new file mode 100644
index 0000000000..cc69c19423
--- /dev/null
+++ b/etc/config.sh/mac/paraview
@@ -0,0 +1,18 @@
+_paraviews=(/Applications/[Pp][Aa][Rr][Aa][Vv][Ii][Ee][Ww]*.app)
+if test -d $_paraviews;
+then
+    [ "$FOAM_VERBOSE" -a "$PS1" ] && echo Using $_paraviews
+
+    paraview () {
+        local _paraviews=(/Applications/[Pp][Aa][Rr][Aa][Vv][Ii][Ee][Ww]*.app)
+        $_paraviews/Contents/MacOS/paraview "$@"
+    }
+
+    export -f paraview
+else
+    echo
+    echo "Please download binary Paraview release from"
+    echo "http://paraview.org and install it in /Applications"
+    echo "folder."
+    echo
+fi
diff --git a/etc/config.sh/mac/scotch b/etc/config.sh/mac/scotch
new file mode 100644
index 0000000000..e62931c9b1
--- /dev/null
+++ b/etc/config.sh/mac/scotch
@@ -0,0 +1,47 @@
+#----------------------------------*-sh-*--------------------------------------
+# =========                 |
+# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+#  \\    /   O peration     |
+#   \\  /    A nd           | Copyright (C) 2011-2016 OpenFOAM Foundation
+#    \\/     M anipulation  |
+#------------------------------------------------------------------------------
+# License
+#     This file is part of OpenFOAM.
+#
+#     OpenFOAM is free software: you can redistribute it and/or modify it
+#     under the terms of the GNU General Public License as published by
+#     the Free Software Foundation, either version 3 of the License, or
+#     (at your option) any later version.
+#
+#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+#     for more details.
+#
+#     You should have received a copy of the GNU General Public License
+#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+#
+# File
+#     etc/config.sh/scotch
+#
+# Description
+#     Setup file for scotch include/libraries.
+#     Sourced during wmake process only.
+#
+# Note
+#     A csh version is not needed, since the values here are only sourced
+#     during the wmake process
+#
+#     If Scotch is to be entirely disabled, either rename this file or create
+#     an empty one with the same name at a user or site location.
+#
+#------------------------------------------------------------------------------
+
+. $WM_PROJECT_DIR/etc/config.sh/mac/functions
+
+export SCOTCH_VERSION=$(_foamGetPackageVersion scotch)
+export SCOTCH_ARCH_PATH=$(_foamGetPackageArchPath scotch)
+
+. $WM_PROJECT_DIR/etc/config.sh/mac/functions
+
+#------------------------------------------------------------------------------
diff --git a/etc/config.sh/mpi b/etc/config.sh/mpi
index 8981d68592..e5d0ce8ff1 100644
--- a/etc/config.sh/mpi
+++ b/etc/config.sh/mpi
@@ -47,7 +47,7 @@ SYSTEMOPENMPI)
 
     # Bit of a hack: strip off 'lib' and hope this is the path to openmpi
     # include files and libraries.
-    export MPI_ARCH_PATH="${libDir%/*}"
+    _foam_on_macos || export MPI_ARCH_PATH="${libDir%/*}"
 
     _foamAddLib     $libDir
     unset libDir
@@ -263,7 +263,8 @@ esac
 # Dummy MPI already added to LD_LIBRARY_PATH and has no external libraries
 if [ "$FOAM_MPI" != dummy ]
 then
-    _foamAddLib $FOAM_LIBBIN/$FOAM_MPI:$FOAM_EXT_LIBBIN/$FOAM_MPI
+    _foamAddLib $FOAM_LIBBIN/$FOAM_MPI
+    [ -n "$FOAM_EXT_LIBBIN" ] && _foamAddLib $FOAM_EXT_LIBBIN/$FOAM_MPI
 fi
 
 
diff --git a/etc/config.sh/settings b/etc/config.sh/settings
index 0a69a70190..067094d91d 100644
--- a/etc/config.sh/settings
+++ b/etc/config.sh/settings
@@ -135,6 +135,13 @@ SunOS)
     export WM_LDFLAGS='-mabi=64 -G0'
     ;;
 
+Darwin)
+    WM_ARCH=darwin64
+    export WM_COMPILER_ARCH=64
+    export WM_CC=clang
+    export WM_CXX=clang++
+    ;;
+
 *)       # An unsupported operating system
     /bin/cat <<USAGE 1>&2
 
@@ -162,7 +169,7 @@ export FOAM_APPBIN=$WM_PROJECT_DIR/platforms/$WM_OPTIONS/bin
 export FOAM_LIBBIN=$WM_PROJECT_DIR/platforms/$WM_OPTIONS/lib
 
 # External (ThirdParty) libraries
-export FOAM_EXT_LIBBIN=$WM_THIRD_PARTY_DIR/platforms/$WM_ARCH$WM_COMPILER$WM_PRECISION_OPTION$WM_LABEL_OPTION/lib
+_foam_on_macos || export FOAM_EXT_LIBBIN=$WM_THIRD_PARTY_DIR/platforms/$WM_ARCH$WM_COMPILER$WM_PRECISION_OPTION$WM_LABEL_OPTION/lib
 
 # Site-specific directory
 siteDir="${WM_PROJECT_SITE:-$WM_PROJECT_INST_DIR/site}"
@@ -211,7 +218,12 @@ fi
 unset siteDir
 
 # Make sure to pick up dummy versions of external libraries last
-_foamAddLib  $FOAM_USER_LIBBIN:$FOAM_SITE_LIBBIN:$FOAM_LIBBIN:$FOAM_EXT_LIBBIN:$FOAM_LIBBIN/dummy
+if [ -n "$FOAM_EXT_LIBBIN" ]
+then
+    _foamAddLib  $FOAM_USER_LIBBIN:$FOAM_SITE_LIBBIN:$FOAM_LIBBIN:$FOAM_EXT_LIBBIN:$FOAM_LIBBIN/dummy
+else
+    _foamAddLib  $FOAM_USER_LIBBIN:$FOAM_SITE_LIBBIN:$FOAM_LIBBIN:$FOAM_LIBBIN/dummy
+fi
 
 # Compiler settings
 # ~~~~~~~~~~~~~~~~~
@@ -313,6 +325,8 @@ USAGE
     ;;
 esac
 
+_foam_on_macos && _foam_increase_max_open_files 4096
+
 # Cleanup environment:
 # ~~~~~~~~~~~~~~~~~~~~
 unset WM_COMPILER_TYPE
diff --git a/etc/config.sh/unset b/etc/config.sh/unset
index fa87d0831d..5fc046e336 100644
--- a/etc/config.sh/unset
+++ b/etc/config.sh/unset
@@ -29,6 +29,9 @@
 #
 #------------------------------------------------------------------------------
 
+foamDarwin=0
+[ "$(uname -s)" = "Darwin" ] && foamDarwin=1
+
 # Clean standard environment variables (PATH, LD_LIBRARY_PATH, MANPATH)
 foamClean=$WM_PROJECT_DIR/bin/foamCleanPath
 [ -f "$foamClean" -a -x "$foamClean" ] || unset foamClean
@@ -46,6 +49,7 @@ unset WM_ARCH_OPTION
 unset WM_CC
 unset WM_CFLAGS
 unset WM_COMPILER
+unset WM_COMPILER_ARCH
 unset WM_COMPILER_TYPE
 unset WM_COMPILER_LIB_ARCH
 unset WM_COMPILE_OPTION
@@ -154,12 +158,24 @@ unset PV_PLUGIN_PATH
 if [ -n "$foamClean" ]
 then
     cleaned=`$foamClean "$PATH" "$foamOldDirs"` && PATH="$cleaned"
-    cleaned=`$foamClean "$LD_LIBRARY_PATH" "$foamOldDirs"` && LD_LIBRARY_PATH="$cleaned"
+    if [ $foamDarwin ]
+    then
+        cleaned=`$foamClean "$FOAM_DYLD_LIBRARY_PATH" "$foamOldDirs"` && FOAM_DYLD_LIBRARY_PATH="$cleaned"
+        DYLD_LIBRARY_PATH=$FOAM_DYLD_LIBRARY_PATH
+    else
+        cleaned=`$foamClean "$LD_LIBRARY_PATH" "$foamOldDirs"` && LD_LIBRARY_PATH="$cleaned"
+    fi
     cleaned=`$foamClean "$MANPATH" "$foamOldDirs"` && MANPATH="$cleaned"
 fi
 
 
-[ -n "$LD_LIBRARY_PATH" ] || unset LD_LIBRARY_PATH
+if [ $foamDarwin ]
+then
+    [ -n "$DYLD_LIBRARY_PATH" ] || unset DYLD_LIBRARY_PATH
+    unset FOAM_DYLD_LIBRARY_PATH
+else
+    [ -n "$LD_LIBRARY_PATH" ] || unset LD_LIBRARY_PATH
+fi
 [ -n "$MANPATH" ] || unset MANPATH
 [ -n "$LD_PRELOAD" ] || unset LD_PRELOAD
 
@@ -175,6 +191,7 @@ unalias wm64
 unalias wm32
 unalias wmSP
 unalias wmDP
+unalias wmLP
 
 unset wmRefresh
 unalias wmUnset
@@ -197,4 +214,4 @@ unset foamVersion
 unset foamPV
 
 
-#------------------------------------------------------------------------------
+#--------------------- vi: set ft=sh et sw=4 ts=4 sts=4: ----------------------
diff --git a/etc/cshrc b/etc/cshrc
index 5949fc4d06..945791b733 100644
--- a/etc/cshrc
+++ b/etc/cshrc
@@ -48,6 +48,8 @@ else
     setenv FOAM_INST_DIR $HOME/$WM_PROJECT
 endif
 unset foamInstDir
+
+@ foamDarwin = ( `uname -s` == "Darwin" )
 #
 # Please set to the appropriate path if the above default is not correct. E.g.,
 #
@@ -69,6 +71,7 @@ setenv WM_COMPILER_TYPE system
 #- Compiler:
 #    WM_COMPILER = Gcc | Gcc48 ... Gcc62 | Clang | Icx
 setenv WM_COMPILER Gcc
+if ($foamDarwin) setenv WM_COMPILER Clang
 unsetenv WM_COMPILER_ARCH WM_COMPILER_LIB_ARCH
 
 #- Memory addressing:
@@ -157,10 +160,12 @@ _foamParams ${*}
 
 # Location of third-party software
 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-if ( `echo $WM_PROJECT_DIR | sed 's/.*\///g'` == `echo $WM_THIRD_PARTY | sed 's/\/.*//g'` ) then
-    setenv WM_THIRD_PARTY_DIR $WM_PROJECT_INST_DIR/$WM_THIRD_PARTY
-else
-    setenv WM_THIRD_PARTY_DIR $WM_PROJECT_INST_DIR/$WM_THIRD_PARTY-$WM_PROJECT_VERSION
+if (! $foamDarwin) then
+    if ( `echo $WM_PROJECT_DIR | sed 's/.*\///g'` == `echo $WM_THIRD_PARTY | sed 's/\/.*//g'` ) then
+        setenv WM_THIRD_PARTY_DIR $WM_PROJECT_INST_DIR/$WM_THIRD_PARTY
+    else
+        setenv WM_THIRD_PARTY_DIR $WM_PROJECT_INST_DIR/$WM_THIRD_PARTY-$WM_PROJECT_VERSION
+    endif
 endif
 
 # Location of site-specific templates etc
@@ -181,9 +186,19 @@ setenv WM_PROJECT_USER_DIR $HOME/$WM_PROJECT/$LOGNAME-$WM_PROJECT_VERSION
 set foamClean=$WM_PROJECT_DIR/bin/foamCleanPath
 
 #- prevent local variables from shadowing setenv variables
-unset PATH MANPATH LD_LIBRARY_PATH LD_PRELOAD
+unset PATH MANPATH
+if ($foamDarwin) then
+    unset DYLD_LIBRARY_PATH FOAM_DYLD_LIBRARY_PATH
+else
+    unset LD_LIBRARY_PATH LD_PRELOAD
+endif
 
-if (! $?LD_LIBRARY_PATH ) setenv LD_LIBRARY_PATH ''
+if ($foamDarwin) then
+    if (! $?DYLD_LIBRARY_PATH ) setenv DYLD_LIBRARY_PATH ''
+    setenv FOAM_DYLD_LIBRARY_PATH $DYLD_LIBRARY_PATH
+else
+    if (! $?LD_LIBRARY_PATH ) setenv LD_LIBRARY_PATH ''
+endif
 if (! $?MANPATH) setenv MANPATH ''
 
 #- Clean PATH (path)
@@ -191,8 +206,16 @@ set cleaned=`$foamClean "$PATH" "$foamOldDirs"`
 if ( $status == 0 ) setenv PATH $cleaned
 
 #- Clean LD_LIBRARY_PATH
-set cleaned=`$foamClean "$LD_LIBRARY_PATH" "$foamOldDirs"`
-if ( $status == 0 ) setenv LD_LIBRARY_PATH $cleaned
+if ($foamDarwin) then
+    set cleaned=`$foamClean "$FOAM_DYLD_LIBRARY_PATH" "$foamOldDirs"`
+    if ( $status == 0 ) then
+        setenv FOAM_DYLD_LIBRARY_PATH $cleaned
+        setenv DYLD_LIBRARY_PATH $cleaned
+    endif
+else
+    set cleaned=`$foamClean "$LD_LIBRARY_PATH" "$foamOldDirs"`
+    if ( $status == 0 ) setenv LD_LIBRARY_PATH $cleaned
+endif
 
 #- Clean MANPATH
 set cleaned=`$foamClean "$MANPATH" "$foamOldDirs"`
@@ -207,7 +230,11 @@ _foamSource $WM_PROJECT_DIR/etc/config.csh/aliases
 # Source user setup files for optional packages
 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 _foamSource `$WM_PROJECT_DIR/bin/foamEtcFile config.csh/mpi`
-_foamSource `$WM_PROJECT_DIR/bin/foamEtcFile config.csh/paraview`
+if ($_foamDarwin) then
+    _foamSource `$WM_PROJECT_DIR/bin/mac/foamEtcFile config.csh/paraview`
+else
+    _foamSource `$WM_PROJECT_DIR/bin/foamEtcFile config.csh/paraview`
+endif
 _foamSource `$WM_PROJECT_DIR/bin/foamEtcFile config.csh/ensight`
 
 
@@ -217,9 +244,17 @@ _foamSource `$WM_PROJECT_DIR/bin/foamEtcFile config.csh/ensight`
 set cleaned=`$foamClean "$PATH"`
 if ( $status == 0 ) setenv PATH $cleaned
 
-#- Clean LD_LIBRARY_PATH
-set cleaned=`$foamClean "$LD_LIBRARY_PATH"`
-if ( $status == 0 ) setenv LD_LIBRARY_PATH $cleaned
+#- Clean [FOAM_][DY]LD_LIBRARY_PATH
+if ($foamDarwin) then
+    set cleaned=`$foamClean "$FOAM_DYLD_LIBRARY_PATH"`
+    if ( $status == 0 ) then
+        setenv FOAM_DYLD_LIBRARY_PATH $cleaned
+        setenv DYLD_LIBRARY_PATH $cleaned
+    endif
+else
+    set cleaned=`$foamClean "$LD_LIBRARY_PATH"`
+    if ( $status == 0 ) setenv LD_LIBRARY_PATH $cleaned
+endif
 
 #- Clean MANPATH (trailing ':' to find system pages)
 set cleaned=`$foamClean "$MANPATH"`:
@@ -234,7 +269,7 @@ endif
 
 # Cleanup environment:
 # ~~~~~~~~~~~~~~~~~~~~
-unset cleaned foamClean foamOldDirs
+unset cleaned foamClean foamOldDirs foamDarwin
 
 # Unload initialisation functions:
 # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
diff --git a/src/Allwmake b/src/Allwmake
index 9faa9239ee..3bf7be4f01 100755
--- a/src/Allwmake
+++ b/src/Allwmake
@@ -12,11 +12,13 @@ wmakeCheckPwd "$WM_PROJECT_DIR/src" || {
     exit 1
 }
 
+[ "$(uname -s)" = "Darwin" ] || {
 [ -n "$FOAM_EXT_LIBBIN" ] || {
     echo "Allwmake error: FOAM_EXT_LIBBIN not set"
     echo "    Check the OpenFOAM entries in your dot-files and source them."
     exit 1
 }
+}
 
 # Update OpenFOAM version strings if required
 wmakePrintBuild -check || wrmo OpenFOAM/global/global.o 2>/dev/null
diff --git a/src/OSspecific/POSIX/POSIX.C b/src/OSspecific/POSIX/POSIX.C
index 96f9118a60..48420bae52 100644
--- a/src/OSspecific/POSIX/POSIX.C
+++ b/src/OSspecific/POSIX/POSIX.C
@@ -56,7 +56,11 @@ Description
 #include <sys/socket.h>
 #include <netdb.h>
 #include <dlfcn.h>
+#if defined(darwin64)
+#include <mach-o/dyld.h>
+#else
 #include <link.h>
+#endif
 
 #include <netinet/in.h>
 
@@ -647,9 +651,15 @@ double Foam::highResLastModified
     fileStat fileStatus(name, checkVariants, followLink);
     if (fileStatus.isValid())
     {
+#if defined(darwin64)
+        return
+            fileStatus.status().st_mtime
+          + 1e-9*fileStatus.status().st_atimespec.tv_nsec;
+#else
         return
             fileStatus.status().st_mtime
           + 1e-9*fileStatus.status().st_atim.tv_nsec;
+#endif
     }
     else
     {
@@ -995,7 +1005,7 @@ bool Foam::mvBak(const fileName& src, const std::string& ext)
             fileName dstName(src + "." + ext);
             if (n)
             {
-                sprintf(index, "%02d", n);
+                snprintf(index, 3, "%02d", n);
                 dstName += index;
             }
 
@@ -1241,6 +1251,20 @@ void* Foam::dlOpen(const fileName& lib, const bool check)
             << " : dlopen of " << lib << std::endl;
     }
     void* handle = ::dlopen(lib.c_str(), RTLD_LAZY|RTLD_GLOBAL);
+#if defined(darwin64)
+    if (handle == nullptr && lib.ext() == "so")
+    {
+        fileName fallback_lib = lib.lessExt() + ".dylib";
+        if (check)
+        {
+            WarningIn("dlOpen(const fileName&, const bool)")
+                << "dlOpen: using fallback library name "
+                << fallback_lib
+                << endl;
+        }
+        handle = ::dlopen(fallback_lib.c_str(), RTLD_LAZY|RTLD_GLOBAL);
+    }
+#endif
 
     if (!handle && check)
     {
@@ -1329,6 +1353,7 @@ bool Foam::dlSymFound(void* handle, const std::string& symbol)
 }
 
 
+#if ! defined(darwin64)
 static int collectLibsCallback
 (
     struct dl_phdr_info *info,
@@ -1341,12 +1366,20 @@ static int collectLibsCallback
     ptr->append(info->dlpi_name);
     return 0;
 }
+#endif
 
 
 Foam::fileNameList Foam::dlLoaded()
 {
     DynamicList<fileName> libs;
+#if defined(darwin64)
+    for(uint32_t cnt = 0; cnt < _dyld_image_count(); ++cnt)
+    {
+       libs.append(_dyld_get_image_name(cnt));
+    }
+#else
     dl_iterate_phdr(collectLibsCallback, &libs);
+#endif
     if (POSIX::debug)
     {
         std::cout
diff --git a/src/OSspecific/POSIX/clockTime/clockTime.H b/src/OSspecific/POSIX/clockTime/clockTime.H
index 4319b64b16..9d76efe228 100644
--- a/src/OSspecific/POSIX/clockTime/clockTime.H
+++ b/src/OSspecific/POSIX/clockTime/clockTime.H
@@ -37,6 +37,9 @@ SourceFiles
 #define clockTime_H
 
 #include <sys/types.h>
+#if defined(darwin64)
+#include <sys/time.h>
+#endif
 
 // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
 
diff --git a/src/OSspecific/POSIX/fileStat.C b/src/OSspecific/POSIX/fileStat.C
index ffb26041ca..3cf9650648 100644
--- a/src/OSspecific/POSIX/fileStat.C
+++ b/src/OSspecific/POSIX/fileStat.C
@@ -29,7 +29,9 @@ License
 
 #include <signal.h>
 #include <unistd.h>
+#if ! defined(darwin64)
 #include <sys/sysmacros.h>
+#endif
 
 // * * * * * * * * * * * * * * Static Data Members * * * * * * * * * * * * * //
 
diff --git a/src/OSspecific/POSIX/printStack.C b/src/OSspecific/POSIX/printStack.C
index 84003866dd..487c17a2b3 100644
--- a/src/OSspecific/POSIX/printStack.C
+++ b/src/OSspecific/POSIX/printStack.C
@@ -84,7 +84,11 @@ string pOpen(const string &cmd, label line=0)
 inline word addressToWord(const uintptr_t addr)
 {
     OStringStream nStream;
+    #if defined(darwin64)
+    nStream << "0x" << hex << uint64_t(addr);
+    #else
     nStream << "0x" << hex << addr;
+    #endif
     return nStream.str();
 }
 
@@ -100,9 +104,11 @@ void printSourceFileAndLine
     uintptr_t address = uintptr_t(addr);
     word myAddress = addressToWord(address);
 
+#if ! defined(darwin64)
     if (filename.ext() == "so")
+#endif
     {
-        // Convert address into offset into dynamic library
+        // Convert address into offset
         uintptr_t offset = uintptr_t(info->dli_fbase);
         intptr_t relativeAddress = address - offset;
         myAddress = addressToWord(relativeAddress);
@@ -112,13 +118,40 @@ void printSourceFileAndLine
     {
         string line = pOpen
         (
+#if defined(darwin64)
+            "echo 'image lookup -va " + myAddress + "'"
+          + " | xcrun lldb "
+          + "-O 'target create --no-dependents -a x86_64 "
+          + filename
+          + "' -o '"
+          + "target modules load -f "
+          + filename
+          + " __TEXT 0x0' 2> /dev/null"
+          + " | grep LineEntry"
+#else
             "addr2line -f --demangle=auto --exe "
           + filename
           + " "
           + myAddress,
             1
+#endif
         );
 
+#if defined(darwin64)
+        {
+            regExp re(".+LineEntry: .+: (.+):([0-9]+):[0-9]+");
+            List<std::string> groups;
+            if (!re.match(line, groups))
+            {
+                line = "??:0";
+            }
+            else
+            {
+                line = groups[0] + ":" + groups[1];
+            }
+        }
+#endif
+
         if (line == "")
         {
             os  << " addr2line failed";
@@ -156,9 +189,9 @@ fileName absolutePath(const char* fn)
 }
 
 
-word demangleSymbol(const char* sn)
+string demangleSymbol(const char* sn)
 {
-    word res;
+    string res;
     int st;
     char* cxx_sname = abi::__cxa_demangle
     (
@@ -170,12 +203,12 @@ word demangleSymbol(const char* sn)
 
     if (st == 0 && cxx_sname)
     {
-        res = word(cxx_sname);
+        res = string(cxx_sname);
         free(cxx_sname);
     }
     else
     {
-        res = word(sn);
+        res = string(sn);
     }
 
     return res;
diff --git a/src/OSspecific/POSIX/signals/sigFpe.C b/src/OSspecific/POSIX/signals/sigFpe.C
index f9c05bb04c..ae9099d9de 100644
--- a/src/OSspecific/POSIX/signals/sigFpe.C
+++ b/src/OSspecific/POSIX/signals/sigFpe.C
@@ -37,6 +37,12 @@ License
     #include <malloc.h>
 #endif
 
+#if defined(darwin64)
+#include <xmmintrin.h>
+#include <sys/mman.h>
+#include <unistd.h>
+#endif
+
 #include <limits>
 
 // * * * * * * * * * * * * * * Static Data Members * * * * * * * * * * * * * //
@@ -50,6 +56,26 @@ void Foam::sigFpe::fillNan(UList<scalar>& lst)
 
 bool Foam::sigFpe::mallocNanActive_ = false;
 
+#if defined(darwin64)
+void *(*Foam::sigFpe::oldMalloc_)(struct _malloc_zone_t *zone, size_t size)
+    = NULL;
+
+void *Foam::sigFpe::nanMalloc_(struct _malloc_zone_t *zone, size_t size)
+{
+    void *result;
+
+    result = oldMalloc_(zone, size);
+
+    if (mallocNanActive_)
+    {
+        UList<scalar> lst(reinterpret_cast<scalar*>(result),
+                          size/sizeof(scalar));
+        fillNan(lst);
+    }
+
+    return result;
+}
+#endif
 
 #ifdef LINUX
 extern "C"
@@ -84,7 +110,7 @@ void* Foam::sigFpe::mallocNan(size_t size)
 #endif
 
 
-#ifdef LINUX_GNUC
+#if defined(LINUX_GNUC) || defined(darwin64)
 void Foam::sigFpe::sigHandler(int)
 {
     // Reset old handling
@@ -120,7 +146,7 @@ Foam::sigFpe::~sigFpe()
 {
     if (env("FOAM_SIGFPE"))
     {
-        #ifdef LINUX_GNUC
+        #if defined(LINUX_GNUC) || defined(darwin64)
         // Reset signal
         if
         (
@@ -137,10 +163,24 @@ Foam::sigFpe::~sigFpe()
 
     if (env("FOAM_SETNAN"))
     {
-        #ifdef LINUX
+        #if defined(LINUX) || defined(darwin64)
         // Disable initialisation to NaN
         mallocNanActive_ = false;
         #endif
+
+        #if defined(darwin64)
+        // Restoring old malloc handler
+        if (oldMalloc_ != NULL) {
+            malloc_zone_t *zone = malloc_default_zone();
+
+            if (zone != NULL)
+            {
+                mprotect(zone, getpagesize(), PROT_READ | PROT_WRITE);
+                zone->malloc = oldMalloc_;
+                mprotect(zone, getpagesize(), PROT_READ);
+            }
+        }
+        #endif
     }
 }
 
@@ -160,15 +200,21 @@ void Foam::sigFpe::set(const bool verbose)
     {
         bool supported = false;
 
-        #ifdef LINUX_GNUC
+        #if defined(LINUX_GNUC) || defined(darwin64)
         supported = true;
 
+        #if defined(LINUX_GNUC)
         feenableexcept
         (
             FE_DIVBYZERO
           | FE_INVALID
           | FE_OVERFLOW
         );
+        #endif  // LINUX_GNUC
+        #if defined(darwin64)
+        _mm_setcsr(_MM_MASK_MASK &~
+                   (_MM_MASK_OVERFLOW|_MM_MASK_INVALID|_MM_MASK_DIV_ZERO));
+        #endif
 
         struct sigaction newAction;
         newAction.sa_handler = sigHandler;
@@ -200,10 +246,33 @@ void Foam::sigFpe::set(const bool verbose)
 
     if (env("FOAM_SETNAN"))
     {
-        #ifdef LINUX
+        #if defined(LINUX) || defined(darwin64)
         mallocNanActive_ = true;
         #endif
 
+        #if defined(darwin64)
+        malloc_zone_t *zone = malloc_default_zone();
+
+        if (zone != NULL)
+        {
+            oldMalloc_ = zone->malloc;
+            if
+            (
+                mprotect(zone, getpagesize(), PROT_READ | PROT_WRITE) == 0
+            )
+            {
+                zone->malloc = nanMalloc_;
+                if
+                (
+                    mprotect(zone, getpagesize(), PROT_READ) == 0
+                )
+                {
+                    mallocNanActive_ = true;
+                }
+            }
+        }
+        #endif
+
         if (verbose)
         {
             if (mallocNanActive_)
diff --git a/src/OSspecific/POSIX/signals/sigFpe.H b/src/OSspecific/POSIX/signals/sigFpe.H
index b3fb45c9b0..4cbcb29283 100644
--- a/src/OSspecific/POSIX/signals/sigFpe.H
+++ b/src/OSspecific/POSIX/signals/sigFpe.H
@@ -54,6 +54,10 @@ SourceFiles
     #define LINUX_GNUC
 #endif
 
+#if defined(darwin64)
+#include <malloc/malloc.h>
+#endif
+
 #include "UList.H"
 
 // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
@@ -75,11 +79,15 @@ class sigFpe
 
     // Static Data Members
 
-        #ifdef LINUX_GNUC
+        #if defined(LINUX_GNUC) || defined(darwin64)
         //- Handler for caught signals
         static void sigHandler(int);
         #endif
 
+        #if defined(darwin64)
+        static void *(*oldMalloc_)(struct _malloc_zone_t *zone, size_t size);
+        static void *nanMalloc_(struct _malloc_zone_t *zone, size_t size);
+        #endif
 
 public:
 
@@ -103,7 +111,7 @@ public:
         //- Flag to indicate mallocNan is enabled
         static bool mallocNanActive_;
 
-        #ifdef LINUX
+        #if defined(LINUX) || defined(darwin64)
         //- Malloc function which initialises to NaN
         static void* mallocNan(size_t size);
         #endif
diff --git a/src/OpenFOAM/Make/files b/src/OpenFOAM/Make/files
index e292f79e80..376e8357b8 100644
--- a/src/OpenFOAM/Make/files
+++ b/src/OpenFOAM/Make/files
@@ -29,11 +29,13 @@ $(chars)/wchar/wcharIO.C
 primitives/direction/directionIO.C
 
 ints = primitives/ints
+$(ints)/uint16/uint16.C
 $(ints)/uint32/uint32.C
 $(ints)/uint32/uint32IO.C
 $(ints)/uint64/uint64.C
 $(ints)/uint64/uint64IO.C
 $(ints)/uint/uintIO.C
+$(ints)/int16/int16.C
 $(ints)/int32/int32.C
 $(ints)/int32/int32IO.C
 $(ints)/int64/int64.C
diff --git a/src/OpenFOAM/containers/Lists/UList/UList.C b/src/OpenFOAM/containers/Lists/UList/UList.C
index b3d4bf03c6..d9b42c8d06 100644
--- a/src/OpenFOAM/containers/Lists/UList/UList.C
+++ b/src/OpenFOAM/containers/Lists/UList/UList.C
@@ -28,6 +28,7 @@ License
 #include "contiguous.H"
 
 #include <algorithm>
+#include <random>
 
 // * * * * * * * * * * * * * * * Member Functions  * * * * * * * * * * * * * //
 
diff --git a/src/OpenFOAM/db/dynamicLibrary/dynamicCode/dynamicCode.C b/src/OpenFOAM/db/dynamicLibrary/dynamicCode/dynamicCode.C
index 5e3fb9b348..d70811306e 100644
--- a/src/OpenFOAM/db/dynamicLibrary/dynamicCode/dynamicCode.C
+++ b/src/OpenFOAM/db/dynamicLibrary/dynamicCode/dynamicCode.C
@@ -346,7 +346,11 @@ Foam::fileName Foam::dynamicCode::codeRelPath() const
 
 Foam::fileName Foam::dynamicCode::libRelPath() const
 {
+#if defined(darwin64)
+    return codeRelPath()/libSubDir_/"lib" + codeName_ + ".dylib";
+#else
     return codeRelPath()/libSubDir_/"lib" + codeName_ + ".so";
+#endif
 }
 
 
diff --git a/src/OpenFOAM/db/dynamicLibrary/dynamicCode/dynamicCode.H b/src/OpenFOAM/db/dynamicLibrary/dynamicCode/dynamicCode.H
index 7aeacaf2a2..def41b811f 100644
--- a/src/OpenFOAM/db/dynamicLibrary/dynamicCode/dynamicCode.H
+++ b/src/OpenFOAM/db/dynamicLibrary/dynamicCode/dynamicCode.H
@@ -219,7 +219,11 @@ public:
         //  Corresponds to codeRoot()/libSubDir()/lib\<codeName\>.so
         fileName libPath() const
         {
+            #if defined(darwin64)
+            return codeRoot_/libSubDir_/"lib" + codeName_ + ".dylib";
+            #else
             return codeRoot_/libSubDir_/"lib" + codeName_ + ".so";
+            #endif
         }
 
         //- Path for specified code name relative to \$FOAM_CASE
diff --git a/src/OpenFOAM/primitives/Scalar/doubleFloat.H b/src/OpenFOAM/primitives/Scalar/doubleFloat.H
index 8c783b4cea..366eb21e96 100644
--- a/src/OpenFOAM/primitives/Scalar/doubleFloat.H
+++ b/src/OpenFOAM/primitives/Scalar/doubleFloat.H
@@ -31,6 +31,46 @@ License
 
 #include <cmath>
 
+#if defined(darwin64)
+inline float j0f(float x) { return float(j0(double(x)));}
+inline float j1f(float x) { return float(j1(double(x)));}
+inline float y0f(float x) { return float(y0(double(x)));}
+inline float y1f(float x) { return float(y1(double(x)));}
+inline float jnf(const int n, const float s) { return float(jn(n, double(s))); }
+inline float ynf(const int n, const float s) { return float(yn(n, double(s))); }
+
+inline long double j0l(long double x)
+{
+    return static_cast<long double>(j0(static_cast<double>(x)));
+}
+
+inline long double j1l(long double x)
+{
+    return static_cast<long double>(j1(static_cast<double>(x)));
+}
+
+inline long double y0l(long double x)
+{
+    return static_cast<long double>(y0(static_cast<double>(x)));
+}
+
+inline long double y1l(float x)
+{
+    return static_cast<long double>(y1(static_cast<double>(x)));
+}
+
+inline long double jnl(const int n, const long double s)
+{
+    return static_cast<long double>(jn(n, static_cast<double>(s)));
+}
+
+inline long double ynl(const int n, const long double s)
+{
+    return static_cast<long double>(yn(n, static_cast<double>(s)));
+}
+
+#endif
+
 // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
 
 namespace Foam
diff --git a/src/OpenFOAM/primitives/hashes/Hasher/Hasher.C b/src/OpenFOAM/primitives/hashes/Hasher/Hasher.C
index a17bfcf2bf..64ef2df7dd 100644
--- a/src/OpenFOAM/primitives/hashes/Hasher/Hasher.C
+++ b/src/OpenFOAM/primitives/hashes/Hasher/Hasher.C
@@ -457,7 +457,7 @@ static unsigned jenkins_hashbig
             case 4 : a += k[3]; [[fallthrough]];
             case 3 : a += static_cast<uint32_t>(k[2]) << 8; [[fallthrough]];
             case 2 : a += static_cast<uint32_t>(k[1]) << 16; [[fallthrough]];
-            case 1 : a += static_cast<uint32_t>(k[0]) << 24; [[fallthrough]];
+            case 1 : a += static_cast<uint32_t>(k[0]) << 24;
                 break;
             case 0 : return c;
         }
diff --git a/src/OpenFOAM/primitives/ints/int/int.H b/src/OpenFOAM/primitives/ints/int/int.H
index 6b0d74c25b..fae1ab8988 100644
--- a/src/OpenFOAM/primitives/ints/int/int.H
+++ b/src/OpenFOAM/primitives/ints/int/int.H
@@ -37,6 +37,9 @@ SourceFiles
 
 #include "int32.H"
 #include "int64.H"
+#ifdef __APPLE__
+#include "string.H"
+#endif
 
 // * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
 
@@ -63,6 +66,7 @@ MAXMIN(int32_t, int32_t, int32_t)
 MAXMIN(int64_t, int64_t, int32_t)
 MAXMIN(int64_t, int32_t, int64_t)
 MAXMIN(int64_t, int64_t, int64_t)
+MAXMIN(string::size_type,string::size_type,string::size_type)
 
 
 // * * * * * * * * * * * * * * * IOstream Operators  * * * * * * * * * * * * //
diff --git a/src/OpenFOAM/primitives/ints/int16/int16.C b/src/OpenFOAM/primitives/ints/int16/int16.C
new file mode 100644
index 0000000000..240b8f63b7
--- /dev/null
+++ b/src/OpenFOAM/primitives/ints/int16/int16.C
@@ -0,0 +1,48 @@
+/*---------------------------------------------------------------------------*\
+  =========                 |
+  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+   \\    /   O peration     |
+    \\  /    A nd           | Copyright (C) 2018 OpenCFD Ltd.
+     \\/     M anipulation  |
+-------------------------------------------------------------------------------
+License
+    This file is part of OpenFOAM.
+
+    OpenFOAM is free software: you can redistribute it and/or modify it
+    under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+    for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+
+\*---------------------------------------------------------------------------*/
+
+#include "int16.H"
+#include "int32.H"
+#include "IOstreams.H"
+
+// * * * * * * * * * * * * * * * IOstream Operators  * * * * * * * * * * * * //
+
+Foam::Istream& Foam::operator>>(Istream& is, int16_t& val)
+{
+    int32_t parsed;
+    is >> parsed;
+
+    val = int16_t(parsed); // narrow
+    return is;
+}
+
+
+Foam::Ostream& Foam::operator<<(Ostream& os, const int16_t val)
+{
+    return (os << int32_t(val)); // widen
+}
+
+
+// ************************************************************************* //
diff --git a/src/OpenFOAM/primitives/ints/int16/int16.H b/src/OpenFOAM/primitives/ints/int16/int16.H
new file mode 100644
index 0000000000..b4f92c01ca
--- /dev/null
+++ b/src/OpenFOAM/primitives/ints/int16/int16.H
@@ -0,0 +1,73 @@
+/*---------------------------------------------------------------------------*\
+  =========                 |
+  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+   \\    /   O peration     |
+    \\  /    A nd           | Copyright (C) 2018 OpenCFD Ltd.
+     \\/     M anipulation  |
+-------------------------------------------------------------------------------
+License
+    This file is part of OpenFOAM.
+
+    OpenFOAM is free software: you can redistribute it and/or modify it
+    under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+    for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+
+Primitive
+    int16_t
+
+Description
+    16bit signed integer. I/O is done via an int32.
+
+SourceFiles
+    int16.C
+
+\*---------------------------------------------------------------------------*/
+
+#ifndef int16_H
+#define int16_H
+
+#include <cstdint>
+#include "word.H"
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+namespace Foam
+{
+
+class Istream;
+class Ostream;
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+//- Return a word representation of an int16
+inline word name(const int16_t val)
+{
+    // No stripping required
+    return word(std::to_string(int(val)), false);
+}
+
+
+// * * * * * * * * * * * * * * * IOstream Operators  * * * * * * * * * * * * //
+
+Istream& operator>>(Istream& is, int16_t& val);
+Ostream& operator<<(Ostream& os, const int16_t val);
+
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+} // End namespace Foam
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+#endif
+
+// ************************************************************************* //
diff --git a/src/OpenFOAM/primitives/ints/int64/int64.H b/src/OpenFOAM/primitives/ints/int64/int64.H
index c39286b996..d4bdd876c2 100644
--- a/src/OpenFOAM/primitives/ints/int64/int64.H
+++ b/src/OpenFOAM/primitives/ints/int64/int64.H
@@ -68,6 +68,11 @@ bool read(const char*, int64_t&);
 Istream& operator>>(Istream&, int64_t&);
 Ostream& operator<<(Ostream&, const int64_t);
 
+#if defined(darwin64)
+Istream& operator>>(Istream& is, long& val);
+Ostream& operator<<(Ostream& os, const long val);
+#endif
+
 inline void writeEntry(Ostream& os, const int64_t value)
 {
     os << value;
diff --git a/src/OpenFOAM/primitives/ints/int64/int64IO.C b/src/OpenFOAM/primitives/ints/int64/int64IO.C
index 300d3ff923..63135a3a0c 100644
--- a/src/OpenFOAM/primitives/ints/int64/int64IO.C
+++ b/src/OpenFOAM/primitives/ints/int64/int64IO.C
@@ -99,5 +99,17 @@ Foam::Ostream& Foam::operator<<(Ostream& os, const int64_t i)
     return os;
 }
 
+#if defined(darwin64)
+Foam::Istream& Foam::operator>>(Istream& is, long& val)
+{
+    return operator>>(is, reinterpret_cast<int64_t&>(val));
+}
+
+Foam::Ostream& Foam::operator<<(Ostream& os, const long val)
+{
+    return (os << int64_t(val));
+}
+#endif
+
 
 // ************************************************************************* //
diff --git a/src/OpenFOAM/primitives/ints/uint/uint.H b/src/OpenFOAM/primitives/ints/uint/uint.H
index 0698df700c..fe3828e06f 100644
--- a/src/OpenFOAM/primitives/ints/uint/uint.H
+++ b/src/OpenFOAM/primitives/ints/uint/uint.H
@@ -35,6 +35,7 @@ SourceFiles
 #ifndef uint_H
 #define uint_H
 
+#include "uint16.H"
 #include "uint32.H"
 #include "uint64.H"
 
diff --git a/src/OpenFOAM/primitives/ints/uint16/uint16.C b/src/OpenFOAM/primitives/ints/uint16/uint16.C
new file mode 100644
index 0000000000..b98b7b1fef
--- /dev/null
+++ b/src/OpenFOAM/primitives/ints/uint16/uint16.C
@@ -0,0 +1,48 @@
+/*---------------------------------------------------------------------------*\
+  =========                 |
+  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+   \\    /   O peration     |
+    \\  /    A nd           | Copyright (C) 2018 OpenCFD Ltd.
+     \\/     M anipulation  |
+-------------------------------------------------------------------------------
+License
+    This file is part of OpenFOAM.
+
+    OpenFOAM is free software: you can redistribute it and/or modify it
+    under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+    for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+
+\*---------------------------------------------------------------------------*/
+
+#include "uint16.H"
+#include "int32.H"
+#include "IOstreams.H"
+
+// * * * * * * * * * * * * * * * IOstream Operators  * * * * * * * * * * * * //
+
+Foam::Istream& Foam::operator>>(Istream& is, uint16_t& val)
+{
+    int32_t parsed;
+    is >> parsed;
+
+    val = uint16_t(parsed); // narrow
+    return is;
+}
+
+
+Foam::Ostream& Foam::operator<<(Ostream& os, const uint16_t val)
+{
+    return (os << int32_t(val)); // widen (fits as int32 without sign problem)
+}
+
+
+// ************************************************************************* //
diff --git a/src/OpenFOAM/primitives/ints/uint16/uint16.H b/src/OpenFOAM/primitives/ints/uint16/uint16.H
new file mode 100644
index 0000000000..9b23ce5660
--- /dev/null
+++ b/src/OpenFOAM/primitives/ints/uint16/uint16.H
@@ -0,0 +1,73 @@
+/*---------------------------------------------------------------------------*\
+  =========                 |
+  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
+   \\    /   O peration     |
+    \\  /    A nd           | Copyright (C) 2018 OpenCFD Ltd.
+     \\/     M anipulation  |
+-------------------------------------------------------------------------------
+License
+    This file is part of OpenFOAM.
+
+    OpenFOAM is free software: you can redistribute it and/or modify it
+    under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
+    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+    for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
+
+Primitive
+    uint16_t
+
+Description
+    16bit unsigned integer. I/O is done via an int32.
+
+SourceFiles
+    uint16.C
+
+\*---------------------------------------------------------------------------*/
+
+#ifndef uint16_H
+#define uint16_H
+
+#include <cstdint>
+#include "word.H"
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+namespace Foam
+{
+
+class Istream;
+class Ostream;
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+//- Return a word representation of a uint16
+inline word name(const uint16_t val)
+{
+    // No stripping required
+    return word(std::to_string(int(val)), false);
+}
+
+
+// * * * * * * * * * * * * * * * IOstream Operators  * * * * * * * * * * * * //
+
+Istream& operator>>(Istream& is, uint16_t& val);
+Ostream& operator<<(Ostream& os, const uint16_t val);
+
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+} // End namespace Foam
+
+// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //
+
+#endif
+
+// ************************************************************************* //
diff --git a/src/OpenFOAM/primitives/ints/uint64/uint64.H b/src/OpenFOAM/primitives/ints/uint64/uint64.H
index 31d2a0aa36..008a00c465 100644
--- a/src/OpenFOAM/primitives/ints/uint64/uint64.H
+++ b/src/OpenFOAM/primitives/ints/uint64/uint64.H
@@ -68,6 +68,10 @@ bool read(const char*, uint64_t&);
 Istream& operator>>(Istream&, uint64_t&);
 Ostream& operator<<(Ostream&, const uint64_t);
 
+#if defined(darwin64)
+Ostream& operator<<(Ostream& os, const unsigned long val);
+#endif
+
 //- Template specialisation for pTraits<uint64_t>
 template<>
 class pTraits<uint64_t>
diff --git a/src/OpenFOAM/primitives/ints/uint64/uint64IO.C b/src/OpenFOAM/primitives/ints/uint64/uint64IO.C
index 7f852be572..6834f8724e 100644
--- a/src/OpenFOAM/primitives/ints/uint64/uint64IO.C
+++ b/src/OpenFOAM/primitives/ints/uint64/uint64IO.C
@@ -99,5 +99,13 @@ Foam::Ostream& Foam::operator<<(Ostream& os, const uint64_t i)
     return os;
 }
 
+#if defined(darwin64)
+Foam::Ostream& Foam::operator<<(Ostream& os, const unsigned long val)
+{
+    os << uint64_t(val);
+    return os;
+}
+#endif
+
 
 // ************************************************************************* //
diff --git a/src/fvAgglomerationMethods/Allwmake b/src/fvAgglomerationMethods/Allwmake
index dcef4328c2..48abdf0204 100755
--- a/src/fvAgglomerationMethods/Allwmake
+++ b/src/fvAgglomerationMethods/Allwmake
@@ -4,10 +4,14 @@ cd ${0%/*} || exit 1    # Run from this directory
 # Parse arguments for library compilation
 . $WM_PROJECT_DIR/wmake/scripts/AllwmakeParseArguments
 
-export ParMGridGen=$WM_THIRD_PARTY_DIR/ParMGridGen-1.0
-
-if [ -e "$FOAM_LIBBIN/libMGridGen.so" ]
+if [ "$(uname -s)" = "Darwin" ]
+then
+    [ -e "/usr/local/opt/parmgridgen/lib/libmgrid.a" -a \
+        "$WM_LABEL_SIZE" -ne "64" ] \
+        && wmake $targetType MGridGenGamgAgglomeration
+elif [ -e "$FOAM_LIBBIN/libMGridGen.so" ]
 then
+    export ParMGridGen=$WM_THIRD_PARTY_DIR/ParMGridGen-1.0
     wmake $targetType MGridGenGamgAgglomeration
 fi
 
diff --git a/src/fvAgglomerationMethods/MGridGenGamgAgglomeration/Make/options b/src/fvAgglomerationMethods/MGridGenGamgAgglomeration/Make/options
index 69f63dbe57..18d31d4220 100644
--- a/src/fvAgglomerationMethods/MGridGenGamgAgglomeration/Make/options
+++ b/src/fvAgglomerationMethods/MGridGenGamgAgglomeration/Make/options
@@ -7,9 +7,15 @@ endif
 
 EXE_INC = \
     -I$(LIB_SRC)/finiteVolume/lnInclude \
-    -I$(ParMGridGen)/MGridGen/Lib/lnInclude \
-    -I$(ParMGridGen)/MGridGen/IMlib/lnInclude \
     $(TYPE_REAL)
 
-LIB_LIBS = \
-    -L$(FOAM_EXT_LIBBIN) -lMGridGen
+LIB_LIBS =
+
+ifeq ($(shell uname -s),Darwin)
+LIB_LIBS = -L/usr/local/opt/parmgridgen/lib -lmgrid
+EXE_INC += -I/usr/local/opt/parmgridgen/include
+else
+LIB_LIBS = -L$(FOAM_EXT_LIBBIN) -lMGridGen
+EXE_INC += -I$(ParMGridGen)/MGridGen/Lib/lnInclude
+EXE_INC += -I$(ParMGridGen)/MGridGen/IMlib/lnInclude
+endif
diff --git a/src/parallel/decompose/ptscotch/Make/options b/src/parallel/decompose/ptscotch/Make/options
index 59ab239980..3598c32105 100644
--- a/src/parallel/decompose/ptscotch/Make/options
+++ b/src/parallel/decompose/ptscotch/Make/options
@@ -17,5 +17,8 @@ LIB_LIBS = \
     -L$(FOAM_EXT_LIBBIN)/$(FOAM_MPI) \
     -lptscotch \
     -lptscotcherrexit \
-    -lscotch \
-    -lrt
+    -lscotch
+
+ifneq ("$(SO)","dylib")
+    LIB_LIBS += -lrt
+endif
diff --git a/src/parallel/decompose/scotch/Make/options b/src/parallel/decompose/scotch/Make/options
index 79b724e4e7..c2ed7b4101 100644
--- a/src/parallel/decompose/scotch/Make/options
+++ b/src/parallel/decompose/scotch/Make/options
@@ -14,5 +14,8 @@ LIB_LIBS = \
     $(if $(SCOTCH_LIB_DIR),-L$(SCOTCH_LIB_DIR)) \
     -L$(FOAM_EXT_LIBBIN) \
     -lscotch \
-    -lscotcherrexit \
-    -lrt
+    -lscotcherrexit
+
+ifneq ("$(SO)","dylib")
+    LIB_LIBS += -lrt
+endif
diff --git a/src/renumber/SloanRenumber/Make/options b/src/renumber/SloanRenumber/Make/options
index cf6e548615..e3b7efff8a 100644
--- a/src/renumber/SloanRenumber/Make/options
+++ b/src/renumber/SloanRenumber/Make/options
@@ -5,7 +5,19 @@ EXE_INC = \
     -I$(LIB_SRC)/renumber/renumberMethods/lnInclude
 
 LIB_LIBS = \
-    -L$(BOOST_ARCH_PATH)/lib -lboost_system \
+    -L$(BOOST_ARCH_PATH)/lib \
     -lmeshTools \
     -ldecompositionMethods \
     -lrenumberMethods
+
+ifeq ("$(shell uname -s)","Darwin")
+SO = dylib
+else
+SO = so
+endif
+
+ifneq ("$(wildcard $(BOOST_ARCH_PATH)/lib/libboost_system-mt.$(SO))","")
+LIB_LIBS += -lboost_system-mt
+else
+LIB_LIBS += -lboost_system
+endif
diff --git a/wmake/makefiles/files b/wmake/makefiles/files
index 20c2797c60..cd39b339ce 100644
--- a/wmake/makefiles/files
+++ b/wmake/makefiles/files
@@ -1,4 +1,4 @@
-#----------------------------*- makefile-gmake -*------------------------------
+ #----------------------------*-makefile-gmake -*------------------------------
 # =========                 |
 # \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
 #  \\    /   O peration     | Website:  https://openfoam.org
diff --git a/wmake/makefiles/general b/wmake/makefiles/general
index e549260f3b..fb23b8ee24 100644
--- a/wmake/makefiles/general
+++ b/wmake/makefiles/general
@@ -88,7 +88,11 @@ endif
 LIB             = libNULL
 
 # Shared library extension
+ifeq ("$(shell uname -s)","Darwin")
+SO              = dylib
+else
 SO              = so
+endif
 
 # Project executable
 EXE             = $(WM_PROJECT).out
diff --git a/wmake/rules/General/transform b/wmake/rules/General/transform
index efb86df866..f7caf93843 100644
--- a/wmake/rules/General/transform
+++ b/wmake/rules/General/transform
@@ -31,7 +31,6 @@ $(OBJECTS_DIR)/%.dep : %
 	@$(WMAKE_BIN)/wmkdep \
 		-R '$(OBJECTS_DIR)/' '$$(OBJECTS_DIR)/' \
 		-R '$(WM_PROJECT_DIR)/' '$$(WM_PROJECT_DIR)/' \
-		-R '$(WM_THIRD_PARTY_DIR)/' '$$(WM_THIRD_PARTY_DIR)/' \
 		$(LIB_HEADER_DIRS) $< $@
 
 #------------------------------------------------------------------------------
diff --git a/wmake/rules/darwin64Clang/CGAL b/wmake/rules/darwin64Clang/CGAL
new file mode 100644
index 0000000000..a1e88161dd
--- /dev/null
+++ b/wmake/rules/darwin64Clang/CGAL
@@ -0,0 +1,9 @@
+CGAL_INC = \
+    -DCGAL_NO_DEPRECATED_CODE \
+    -DCGAL_HEADER_ONLY \
+    -I$(CGAL_ARCH_PATH)/include \
+    -I$(MPFR_ARCH_PATH)/include \
+    -I$(GMP_ARCH_PATH)/include \
+    -I$(BOOST_ARCH_PATH)/include
+
+CGAL_LIBS = -L$(GMP_ARCH_PATH)/lib -L$(MPFR_ARCH_PATH)/lib -lgmp -lmpfr
diff --git a/wmake/rules/darwin64Clang/bison b/wmake/rules/darwin64Clang/bison
new file mode 100644
index 0000000000..3d11bf122a
--- /dev/null
+++ b/wmake/rules/darwin64Clang/bison
@@ -0,0 +1,13 @@
+SUFFIXES += .y .Y
+
+ytoo = $E $(call QUIET_MESSAGE,bison,$(<F)) \
+    $(WM_SCHEDULER) xcrun bison -v -d -y $< $(AND) \
+    mv y.tab.c $(@D)/$(<F).c $(AND) \
+    mv y.tab.h $(@D)/$(<F).h $(AND) \
+    $(cc) $(cFLAGS) -c  $(@D)/$(<F).c -o $@
+
+Ytoo = $E $(call QUIET_MESSAGE,bison,$(<F)) \
+    $(WM_SCHEDULER) xcrun bison -v -d -y $< $(AND) \
+    mv y.tab.c $(@D)/$(<F).C $(AND) \
+    mv y.tab.h $(@D)/$(<F).H $(AND) \
+    $(CC) $(c++FLAGS) -c  $(@D)/$(<F).C -o $@
diff --git a/wmake/rules/darwin64Clang/c b/wmake/rules/darwin64Clang/c
new file mode 100644
index 0000000000..3ce40f2060
--- /dev/null
+++ b/wmake/rules/darwin64Clang/c
@@ -0,0 +1,23 @@
+SUFFIXES += .c
+
+cWARN        = -Wall
+
+cc          = xcrun cc -arch x86_64
+
+include $(RULES)/c$(WM_COMPILE_OPTION)
+
+cFLAGS      = $(GFLAGS) $(cWARN) $(cOPT) $(cDBUG) $(LIB_HEADER_DIRS) -fPIC
+
+ifneq ("$(OSX_SDK_PATH)","")
+cFLAGS += -isysroot $(OSX_SDK_PATH)
+endif
+
+ctoo        = $(WM_SCHEDULER) $(cc) $(cFLAGS) -c $< -o $@
+
+LINK_LIBS   = $(cDBUG)
+
+LINKLIBSO   = $(cc) -Wl,-dylib,-undefined,dynamic_lookup,-w
+
+LINKEXE     = $(cc) -Wl,-execute,-undefined,dynamic_lookup,-w
+
+#----------------------------- vi: set ft=make: -------------------------------
diff --git a/wmake/rules/darwin64Clang/c++ b/wmake/rules/darwin64Clang/c++
new file mode 100644
index 0000000000..09a80ab67a
--- /dev/null
+++ b/wmake/rules/darwin64Clang/c++
@@ -0,0 +1,35 @@
+SUFFIXES += .C
+SUFFIXES += .cxx
+SUFFIXES += .cc
+SUFFIXES += .cpp
+
+c++WARN     = -Wall -Wextra -Wno-unused-parameter -Wno-overloaded-virtual \
+              -Wno-unused-variable -Wno-unused-local-typedef -Wno-invalid-offsetof \
+	      -Wno-deprecated-register -Wno-undefined-var-template -Wno-unqualified-std-cast-call
+
+c++LESSWARN = -Wno-shift-negative-value
+
+CC          = xcrun c++ -arch x86_64 -std=c++14
+
+include $(RULES)/c++$(WM_COMPILE_OPTION)
+
+ptFLAGS     = -DNoRepository -ftemplate-depth-100
+
+c++FLAGS    = $(GFLAGS) $(c++WARN) $(c++OPT) $(c++DBUG) $(ptFLAGS) $(LIB_HEADER_DIRS) -fPIC
+
+ifneq ("$(OSX_SDK_PATH)","")
+c++FLAGS += -isysroot $(OSX_SDK_PATH)
+endif
+
+Ctoo        = $(WM_SCHEDULER) $(CC) $(c++FLAGS) -c $< -o $@
+cxxtoo      = $(Ctoo)
+cctoo       = $(Ctoo)
+cpptoo      = $(Ctoo)
+
+LINK_LIBS   = $(c++DBUG)
+
+LINKLIBSO   = $(CC) $(c++FLAGS) -Wl,-dylib,-undefined,dynamic_lookup,-w
+
+LINKEXE     = $(CC) $(c++FLAGS) -Wl,-execute,-undefined,dynamic_lookup,-w
+
+#----------------------------- vi: set ft=make: -------------------------------
diff --git a/wmake/rules/darwin64Clang/c++Debug b/wmake/rules/darwin64Clang/c++Debug
new file mode 100644
index 0000000000..0ed0af6c02
--- /dev/null
+++ b/wmake/rules/darwin64Clang/c++Debug
@@ -0,0 +1,4 @@
+c++DBUG    = -g -DFULLDEBUG
+c++OPT      = -O0
+
+#----------------------------- vi: set ft=make: -------------------------------
diff --git a/wmake/rules/darwin64Clang/c++Opt b/wmake/rules/darwin64Clang/c++Opt
new file mode 100644
index 0000000000..db785436bc
--- /dev/null
+++ b/wmake/rules/darwin64Clang/c++Opt
@@ -0,0 +1,5 @@
+#c++DBUG     = -O0 -DFULLDEBUG -g
+c++DBUG     =
+c++OPT      = -O3
+
+#----------------------------- vi: set ft=make: -------------------------------
diff --git a/wmake/rules/darwin64Clang/c++Prof b/wmake/rules/darwin64Clang/c++Prof
new file mode 100644
index 0000000000..f86e0d9f93
--- /dev/null
+++ b/wmake/rules/darwin64Clang/c++Prof
@@ -0,0 +1,4 @@
+c++DBUG    = -gline-tables-only
+c++OPT     = -O2
+
+#----------------------------- vi: set ft=make: -------------------------------
diff --git a/wmake/rules/darwin64Clang/cDebug b/wmake/rules/darwin64Clang/cDebug
new file mode 100644
index 0000000000..d45598959b
--- /dev/null
+++ b/wmake/rules/darwin64Clang/cDebug
@@ -0,0 +1,4 @@
+cDBUG       = -g -DFULLDEBUG
+cOPT        = -O0
+
+#----------------------------- vi: set ft=make: -------------------------------
diff --git a/wmake/rules/darwin64Clang/cOpt b/wmake/rules/darwin64Clang/cOpt
new file mode 100644
index 0000000000..0c2e03c5e1
--- /dev/null
+++ b/wmake/rules/darwin64Clang/cOpt
@@ -0,0 +1,4 @@
+cDBUG       =
+cOPT        = -O3
+
+#----------------------------- vi: set ft=make: -------------------------------
diff --git a/wmake/rules/darwin64Clang/cProf b/wmake/rules/darwin64Clang/cProf
new file mode 100644
index 0000000000..864f043d5c
--- /dev/null
+++ b/wmake/rules/darwin64Clang/cProf
@@ -0,0 +1,4 @@
+cDBUG       = -pg
+cOPT        = -O2
+
+#----------------------------- vi: set ft=make: -------------------------------
diff --git a/wmake/rules/darwin64Clang/flex b/wmake/rules/darwin64Clang/flex
new file mode 100644
index 0000000000..a0ef4ee25e
--- /dev/null
+++ b/wmake/rules/darwin64Clang/flex
@@ -0,0 +1,5 @@
+SUFFIXES += .l
+
+ltoo = $E $(call QUIET_MESSAGE,flex,$(<F)) \
+    $(WM_SCHEDULER) xcrun flex -o $(@D)/$(<F).c $< $(AND) \
+    $(cc) $(cFLAGS) -c  $(@D)/$(<F).c -o $@
diff --git a/wmake/rules/darwin64Clang/flex++ b/wmake/rules/darwin64Clang/flex++
new file mode 100644
index 0000000000..a9b72667c9
--- /dev/null
+++ b/wmake/rules/darwin64Clang/flex++
@@ -0,0 +1,5 @@
+SUFFIXES += .L
+
+Ltoo = $E $(call QUIET_MESSAGE,flex++,$(<F)) \
+    $(WM_SCHEDULER) xcrun flex -+ -o$(@D)/$(<F).C -f $< $(AND) \
+    $(CC) $(c++FLAGS) $(c++LESSWARN) -c $(@D)/$(<F).C -o $@
diff --git a/wmake/rules/darwin64Clang/general b/wmake/rules/darwin64Clang/general
new file mode 100644
index 0000000000..e3d90086e7
--- /dev/null
+++ b/wmake/rules/darwin64Clang/general
@@ -0,0 +1,16 @@
+CPP        = xcrun cpp -traditional-cpp $(GFLAGS)
+AR         = xcrun ar
+RANLIB     = xcrun ranlib
+CPP        = xcrun cpp
+LD         = xcrun ld
+
+PROJECT_LIBS = -l$(WM_PROJECT) -ldl
+
+OSX_SDK_PATH = $(shell xcrun --show-sdk-path)
+
+include $(GENERAL_RULES)/standard
+
+include $(RULES)/c
+include $(RULES)/c++
+
+#----------------------------- vi: set ft=make: -------------------------------
diff --git a/wmake/rules/darwin64Clang/yacc b/wmake/rules/darwin64Clang/yacc
new file mode 100644
index 0000000000..d96342637e
--- /dev/null
+++ b/wmake/rules/darwin64Clang/yacc
@@ -0,0 +1,13 @@
+SUFFIXES += .y .Y
+
+ytoo = $E $(call QUIET_MESSAGE,yacc,$(<F)) \
+    $(WM_SCHEDULER) xcrun yacc -v -d $< $(AND) \
+    mv y.tab.c $(@D)/$(<F).c $(AND) \
+    mv y.tab.h $(@D)/parser.h $(AND) \
+    $(CC) $(c++FLAGS) -c $(@D)/$(<F).c -o $@
+
+Ytoo = $E $(call QUIET_MESSAGE,yacc,$(<F)) \
+    $(WM_SCHEDULER) xcrun yacc -v -d $< $(AND) \
+    mv y.tab.c $(@D)/$(<F).C $(AND) \
+    mv y.tab.h $(@D)/parser.H $(AND) \
+    $(CC) $(c++FLAGS) -c $(@D)/$(<F).C -o $@
diff --git a/wmake/rules/darwinArm64Clang/CGAL b/wmake/rules/darwinArm64Clang/CGAL
new file mode 100644
index 0000000000..a1e88161dd
--- /dev/null
+++ b/wmake/rules/darwinArm64Clang/CGAL
@@ -0,0 +1,9 @@
+CGAL_INC = \
+    -DCGAL_NO_DEPRECATED_CODE \
+    -DCGAL_HEADER_ONLY \
+    -I$(CGAL_ARCH_PATH)/include \
+    -I$(MPFR_ARCH_PATH)/include \
+    -I$(GMP_ARCH_PATH)/include \
+    -I$(BOOST_ARCH_PATH)/include
+
+CGAL_LIBS = -L$(GMP_ARCH_PATH)/lib -L$(MPFR_ARCH_PATH)/lib -lgmp -lmpfr
diff --git a/wmake/rules/darwinArm64Clang/bison b/wmake/rules/darwinArm64Clang/bison
new file mode 100644
index 0000000000..3d11bf122a
--- /dev/null
+++ b/wmake/rules/darwinArm64Clang/bison
@@ -0,0 +1,13 @@
+SUFFIXES += .y .Y
+
+ytoo = $E $(call QUIET_MESSAGE,bison,$(<F)) \
+    $(WM_SCHEDULER) xcrun bison -v -d -y $< $(AND) \
+    mv y.tab.c $(@D)/$(<F).c $(AND) \
+    mv y.tab.h $(@D)/$(<F).h $(AND) \
+    $(cc) $(cFLAGS) -c  $(@D)/$(<F).c -o $@
+
+Ytoo = $E $(call QUIET_MESSAGE,bison,$(<F)) \
+    $(WM_SCHEDULER) xcrun bison -v -d -y $< $(AND) \
+    mv y.tab.c $(@D)/$(<F).C $(AND) \
+    mv y.tab.h $(@D)/$(<F).H $(AND) \
+    $(CC) $(c++FLAGS) -c  $(@D)/$(<F).C -o $@
diff --git a/wmake/rules/darwinArm64Clang/c b/wmake/rules/darwinArm64Clang/c
new file mode 100644
index 0000000000..3ce40f2060
--- /dev/null
+++ b/wmake/rules/darwinArm64Clang/c
@@ -0,0 +1,23 @@
+SUFFIXES += .c
+
+cWARN        = -Wall
+
+cc          = xcrun cc -arch x86_64
+
+include $(RULES)/c$(WM_COMPILE_OPTION)
+
+cFLAGS      = $(GFLAGS) $(cWARN) $(cOPT) $(cDBUG) $(LIB_HEADER_DIRS) -fPIC
+
+ifneq ("$(OSX_SDK_PATH)","")
+cFLAGS += -isysroot $(OSX_SDK_PATH)
+endif
+
+ctoo        = $(WM_SCHEDULER) $(cc) $(cFLAGS) -c $< -o $@
+
+LINK_LIBS   = $(cDBUG)
+
+LINKLIBSO   = $(cc) -Wl,-dylib,-undefined,dynamic_lookup,-w
+
+LINKEXE     = $(cc) -Wl,-execute,-undefined,dynamic_lookup,-w
+
+#----------------------------- vi: set ft=make: -------------------------------
diff --git a/wmake/rules/darwinArm64Clang/c++ b/wmake/rules/darwinArm64Clang/c++
new file mode 100644
index 0000000000..09a80ab67a
--- /dev/null
+++ b/wmake/rules/darwinArm64Clang/c++
@@ -0,0 +1,35 @@
+SUFFIXES += .C
+SUFFIXES += .cxx
+SUFFIXES += .cc
+SUFFIXES += .cpp
+
+c++WARN     = -Wall -Wextra -Wno-unused-parameter -Wno-overloaded-virtual \
+              -Wno-unused-variable -Wno-unused-local-typedef -Wno-invalid-offsetof \
+	      -Wno-deprecated-register -Wno-undefined-var-template -Wno-unqualified-std-cast-call
+
+c++LESSWARN = -Wno-shift-negative-value
+
+CC          = xcrun c++ -arch x86_64 -std=c++14
+
+include $(RULES)/c++$(WM_COMPILE_OPTION)
+
+ptFLAGS     = -DNoRepository -ftemplate-depth-100
+
+c++FLAGS    = $(GFLAGS) $(c++WARN) $(c++OPT) $(c++DBUG) $(ptFLAGS) $(LIB_HEADER_DIRS) -fPIC
+
+ifneq ("$(OSX_SDK_PATH)","")
+c++FLAGS += -isysroot $(OSX_SDK_PATH)
+endif
+
+Ctoo        = $(WM_SCHEDULER) $(CC) $(c++FLAGS) -c $< -o $@
+cxxtoo      = $(Ctoo)
+cctoo       = $(Ctoo)
+cpptoo      = $(Ctoo)
+
+LINK_LIBS   = $(c++DBUG)
+
+LINKLIBSO   = $(CC) $(c++FLAGS) -Wl,-dylib,-undefined,dynamic_lookup,-w
+
+LINKEXE     = $(CC) $(c++FLAGS) -Wl,-execute,-undefined,dynamic_lookup,-w
+
+#----------------------------- vi: set ft=make: -------------------------------
diff --git a/wmake/rules/darwinArm64Clang/c++Debug b/wmake/rules/darwinArm64Clang/c++Debug
new file mode 100644
index 0000000000..0ed0af6c02
--- /dev/null
+++ b/wmake/rules/darwinArm64Clang/c++Debug
@@ -0,0 +1,4 @@
+c++DBUG    = -g -DFULLDEBUG
+c++OPT      = -O0
+
+#----------------------------- vi: set ft=make: -------------------------------
diff --git a/wmake/rules/darwinArm64Clang/c++Opt b/wmake/rules/darwinArm64Clang/c++Opt
new file mode 100644
index 0000000000..db785436bc
--- /dev/null
+++ b/wmake/rules/darwinArm64Clang/c++Opt
@@ -0,0 +1,5 @@
+#c++DBUG     = -O0 -DFULLDEBUG -g
+c++DBUG     =
+c++OPT      = -O3
+
+#----------------------------- vi: set ft=make: -------------------------------
diff --git a/wmake/rules/darwinArm64Clang/c++Prof b/wmake/rules/darwinArm64Clang/c++Prof
new file mode 100644
index 0000000000..f86e0d9f93
--- /dev/null
+++ b/wmake/rules/darwinArm64Clang/c++Prof
@@ -0,0 +1,4 @@
+c++DBUG    = -gline-tables-only
+c++OPT     = -O2
+
+#----------------------------- vi: set ft=make: -------------------------------
diff --git a/wmake/rules/darwinArm64Clang/cDebug b/wmake/rules/darwinArm64Clang/cDebug
new file mode 100644
index 0000000000..d45598959b
--- /dev/null
+++ b/wmake/rules/darwinArm64Clang/cDebug
@@ -0,0 +1,4 @@
+cDBUG       = -g -DFULLDEBUG
+cOPT        = -O0
+
+#----------------------------- vi: set ft=make: -------------------------------
diff --git a/wmake/rules/darwinArm64Clang/cOpt b/wmake/rules/darwinArm64Clang/cOpt
new file mode 100644
index 0000000000..0c2e03c5e1
--- /dev/null
+++ b/wmake/rules/darwinArm64Clang/cOpt
@@ -0,0 +1,4 @@
+cDBUG       =
+cOPT        = -O3
+
+#----------------------------- vi: set ft=make: -------------------------------
diff --git a/wmake/rules/darwinArm64Clang/cProf b/wmake/rules/darwinArm64Clang/cProf
new file mode 100644
index 0000000000..864f043d5c
--- /dev/null
+++ b/wmake/rules/darwinArm64Clang/cProf
@@ -0,0 +1,4 @@
+cDBUG       = -pg
+cOPT        = -O2
+
+#----------------------------- vi: set ft=make: -------------------------------
diff --git a/wmake/rules/darwinArm64Clang/flex b/wmake/rules/darwinArm64Clang/flex
new file mode 100644
index 0000000000..a0ef4ee25e
--- /dev/null
+++ b/wmake/rules/darwinArm64Clang/flex
@@ -0,0 +1,5 @@
+SUFFIXES += .l
+
+ltoo = $E $(call QUIET_MESSAGE,flex,$(<F)) \
+    $(WM_SCHEDULER) xcrun flex -o $(@D)/$(<F).c $< $(AND) \
+    $(cc) $(cFLAGS) -c  $(@D)/$(<F).c -o $@
diff --git a/wmake/rules/darwinArm64Clang/flex++ b/wmake/rules/darwinArm64Clang/flex++
new file mode 100644
index 0000000000..a9b72667c9
--- /dev/null
+++ b/wmake/rules/darwinArm64Clang/flex++
@@ -0,0 +1,5 @@
+SUFFIXES += .L
+
+Ltoo = $E $(call QUIET_MESSAGE,flex++,$(<F)) \
+    $(WM_SCHEDULER) xcrun flex -+ -o$(@D)/$(<F).C -f $< $(AND) \
+    $(CC) $(c++FLAGS) $(c++LESSWARN) -c $(@D)/$(<F).C -o $@
diff --git a/wmake/rules/darwinArm64Clang/general b/wmake/rules/darwinArm64Clang/general
new file mode 100644
index 0000000000..e3d90086e7
--- /dev/null
+++ b/wmake/rules/darwinArm64Clang/general
@@ -0,0 +1,16 @@
+CPP        = xcrun cpp -traditional-cpp $(GFLAGS)
+AR         = xcrun ar
+RANLIB     = xcrun ranlib
+CPP        = xcrun cpp
+LD         = xcrun ld
+
+PROJECT_LIBS = -l$(WM_PROJECT) -ldl
+
+OSX_SDK_PATH = $(shell xcrun --show-sdk-path)
+
+include $(GENERAL_RULES)/standard
+
+include $(RULES)/c
+include $(RULES)/c++
+
+#----------------------------- vi: set ft=make: -------------------------------
diff --git a/wmake/rules/darwinArm64Clang/yacc b/wmake/rules/darwinArm64Clang/yacc
new file mode 100644
index 0000000000..d96342637e
--- /dev/null
+++ b/wmake/rules/darwinArm64Clang/yacc
@@ -0,0 +1,13 @@
+SUFFIXES += .y .Y
+
+ytoo = $E $(call QUIET_MESSAGE,yacc,$(<F)) \
+    $(WM_SCHEDULER) xcrun yacc -v -d $< $(AND) \
+    mv y.tab.c $(@D)/$(<F).c $(AND) \
+    mv y.tab.h $(@D)/parser.h $(AND) \
+    $(CC) $(c++FLAGS) -c $(@D)/$(<F).c -o $@
+
+Ytoo = $E $(call QUIET_MESSAGE,yacc,$(<F)) \
+    $(WM_SCHEDULER) xcrun yacc -v -d $< $(AND) \
+    mv y.tab.c $(@D)/$(<F).C $(AND) \
+    mv y.tab.h $(@D)/parser.H $(AND) \
+    $(CC) $(c++FLAGS) -c $(@D)/$(<F).C -o $@
diff --git a/wmake/src/Makefile b/wmake/src/Makefile
index a0d87a84e7..16279c0006 100644
--- a/wmake/src/Makefile
+++ b/wmake/src/Makefile
@@ -52,6 +52,8 @@ WM_COMPILE_OPTION = Opt
 GENERAL_RULES   = $(WM_DIR)/rules/General
 include $(GENERAL_RULES)/general
 
+cFLAGS += -Wno-unused-function
+
 
 #------------------------------------------------------------------------------
 # Targets
diff --git a/wmake/wmake b/wmake/wmake
index 307114655d..24becb4844 100755
--- a/wmake/wmake
+++ b/wmake/wmake
@@ -122,6 +122,11 @@ useAllCores()
         WM_NCOMPPROCS=1
     fi
 
+    if [ -n "$(sysctl -en hw.ncpu)" ]
+    then
+        WM_NCOMPPROCS=$(sysctl -en hw.ncpu)
+    fi
+
     export WM_NCOMPPROCS
 }
 
diff --git a/wmake/wmakeLnInclude b/wmake/wmakeLnInclude
index 84bc63c04d..c10303098f 100755
--- a/wmake/wmakeLnInclude
+++ b/wmake/wmakeLnInclude
@@ -173,10 +173,23 @@ filter()
     shift
 }
 
+if [ "$(uname -s)" = "Darwin" ]; then
+# Implementation is taken from: http://mywiki.wooledge.org/BashFAQ/001
+while IFS= read -r; do pruneNames+=("$REPLY"); done < <(filter name lnInclude Make config noLink)
+[[ $REPLY ]] && pruneNames+=("$REPLY")
+# We use two different arrays instead of original single array implementation
+while IFS= read -r; do prunePathsPrime+=("$REPLY"); done < <(find .. -mindepth 2 -type d -name Make -exec dirname "{}" \+)
+[[ $REPLY ]] && prunePathsPrime+=("$REPLY")
+while IFS= read -r; do prunePaths+=("$REPLY"); done < <(filter path "${prunePathsPrime[@]}")
+[[ $REPLY ]] && prunePaths+=("$REPLY")
+while IFS= read -r; do matchNames+=("$REPLY"); done < <(filter name '*.[CHh]' '*.[ch]xx' '*.[ch]pp' '*.type')
+[[ $REPLY ]] && matchNames+=("$REPLY")
+else
 mapfile -t pruneNames < <(filter name lnInclude Make config noLink)
 mapfile -t prunePaths < <(find .. -mindepth 2 -type d -name Make -printf '%h\n')
 mapfile -t prunePaths < <(filter path "${prunePaths[@]}")
 mapfile -t matchNames < <(filter name '*.[CHh]' '*.[ch]xx' '*.[ch]pp' '*.type')
+fi
 
 find .. \
     \( "${pruneNames[@]}" -o "${prunePaths[@]}" \) -prune \
diff --git a/wmake/wmakeLnIncludeAll b/wmake/wmakeLnIncludeAll
index 6a119d259e..0bf0eaed15 100755
--- a/wmake/wmakeLnIncludeAll
+++ b/wmake/wmakeLnIncludeAll
@@ -128,6 +128,7 @@ then
     for d in $includeDirs
     do [ ! -d "$d" ]
        path=$(eval echo "$d")
+       [ -d "$path" ] || continue
        if [ ! -d "$path/lnInclude" ]
        then
            [ $printed ] || echo "$Script: running wmakeLnInclude on dependent libraries:"
